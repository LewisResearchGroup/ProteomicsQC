{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Django3 Omics Pipelines A web-server to setup processing pipelines proteomics .RAW files. 1) Create a project 2) Create a pipeline by providing a fasta file and a MaxQuant parameter template (mqpar.xml) 3) Submit .RAW files to the pipeline 4) Download results 5) Explore data with the integrated dashboard The server organizes files into projects. Therefore, at least one project hast to be created. Then a pipeline can be created. Herefore, a MaxQuant parameter file (mqpar.xml) and a fasta file have to be provided. MaxQuant Parameter file ( mqpar.xml ) The mqpar.xml has to be created as a blueprint for the pipeline jobs for example using the MaxQuant GUI. The pipeline is currently restricted to process a single .RAW per job, therefore the mqpar.xml file has to be created with a single .RAW file . The MaxQuant version supported is MaxQuant 1.6.10 due to limited compatability between .NET versions used by MaxQuant and current mono versions. mono is a reimplementation for .NET that runs on Linux platforms.ll","title":"Home"},{"location":"#django3-omics-pipelines","text":"A web-server to setup processing pipelines proteomics .RAW files. 1) Create a project 2) Create a pipeline by providing a fasta file and a MaxQuant parameter template (mqpar.xml) 3) Submit .RAW files to the pipeline 4) Download results 5) Explore data with the integrated dashboard The server organizes files into projects. Therefore, at least one project hast to be created. Then a pipeline can be created. Herefore, a MaxQuant parameter file (mqpar.xml) and a fasta file have to be provided.","title":"Django3 Omics Pipelines"},{"location":"#maxquant-parameter-file-mqparxml","text":"The mqpar.xml has to be created as a blueprint for the pipeline jobs for example using the MaxQuant GUI. The pipeline is currently restricted to process a single .RAW per job, therefore the mqpar.xml file has to be created with a single .RAW file . The MaxQuant version supported is MaxQuant 1.6.10 due to limited compatability between .NET versions used by MaxQuant and current mono versions. mono is a reimplementation for .NET that runs on Linux platforms.ll","title":"MaxQuant Parameter file (mqpar.xml)"},{"location":"#_1","text":"","title":""},{"location":"about/","text":"About The LRG Proteomics Pipelines server is maintained by Lewis Research Group at the University of Calgary, Canada. The software can be used free of charge and comes without any warranties for the correctness of the generated results.","title":"About"},{"location":"about/#about","text":"The LRG Proteomics Pipelines server is maintained by Lewis Research Group at the University of Calgary, Canada. The software can be used free of charge and comes without any warranties for the correctness of the generated results.","title":"About"},{"location":"installation/","text":"Install and activate environment: conda create -y -n omics -c conda-forge -c bioconda -c plotly redis-py django\\ django-extensions celery psycopg2 waitress pandas mono rawtools django-filter conda activate omics pip install django_plotly_dash dash-table-experiments colorlover \\ plotly_express django_admin_index djangorestframework django-system-monitor\\ dpd-static-support dash_bootstrap_components django-bootstrap4 git clone https://github.com/soerendip/django_proteomics_quality_control cd django_proteomics_quality_control/proteomics_tools pip install -e . Install and start redis with: sudo add-apt-repository \"deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) universe\" sudo apt install redis-server Test redis with reis-cli ping which should return > PONG NGINX sudo apt install nginx sudo cp config/nginx/omics.conf /etc/nginx/sites-available/ sudo ln -s /etc/nginx/sites-available/omics.conf /etc/nginx/sites-enabled/ sudo systemctl enable nginx Postgres Django requires a database to be running to store web-site information and make changes persistent. The database can be installed and configured with the following commands: ./scripts/generate_omics_config.sh # creates OMICS.conf source OMICS.conf # customize if needed sudo apt install postgresql postgresql-contrib sudo -u postgres createuser $PGUSER sudo -u postgres createdb omics_server sudo -u postgres psql -c \"ALTER USER pgadmin PASSWORD '$PGPW';\" sudo mkdir $OMICS_PUBLIC_MEDIA_ROOT $OMICS_PRIVATE_MEDIA_ROOT sudo chown $USER $OMICS_PUBLIC_MEDIA_ROOT $OMICS_PRIVATE_MEDIA_ROOT mkdir $OMICS_PUBLIC_MEDIA_ROOT/static Add the secrets to the .bashrc . E.g. with: echo \"export OMICS_QC_SECRET_KEY=`openssl rand -hex 64`\" >> ~/.bashrc echo \"source `pwd`/OMICS.conf\" >> ~/.bashrc The configuration file OMICS.conf contains configuration settings that can be adjusted if needed. For example the title shown in the website, Postgres configurations can be changed here. Run celery worker process: Celerery is a job-queing system that is used to run MaxQuant and RawTools jobs. It can be started manually with the command: cd omics_server celery -A omics_server worker -l info -c 1 -E However, this can be ommited if Supervisor is used to start the cerlery server (see below). Setup django Django is a Python based web-frameworks for perfectionists with deadlines. It is opinionated and brings a lot of functionallity out of the box such as the admin pages that are used to control the Proteomics Pipelines. The Postgres database used by Django needs to be created before the server can run with the following commands: cd omics_server python manage.py makemigrations python manage.py makemigrations pipelines python manage.py migrate python manage.py createsuperuser When the server is updated the first three commands may have to be repeated to update the database. Supervisor Supervisor is a process contol system that lets programs run as a service. It starts the celery server as well as the django backend and restarts them automatically in case something goes wrong. The configuration file have to be copied to /etc/supervisor/conf.d/ and then supervisor can be started/stopped with the following commands: sudo apt install supervisor sed s+PATH+`pwd`+ config/supervisor/omics_celery_worker.conf > tmp sudo mv tmp /etc/supervisor/conf.d/omics_celery_worker.conf sed s+PATH+`pwd`+ config/supervisor/omics_server.conf > tmp sudo mv tmp /etc/supervisor/conf.d/omics_server.conf sudo supervisorctl reread sudo supervisorctl update sudo supervisorctl stop all sudo supervisorctl start all sudo supervisorctl status all","title":"Installation"},{"location":"installation/#install-and-activate-environment","text":"conda create -y -n omics -c conda-forge -c bioconda -c plotly redis-py django\\ django-extensions celery psycopg2 waitress pandas mono rawtools django-filter conda activate omics pip install django_plotly_dash dash-table-experiments colorlover \\ plotly_express django_admin_index djangorestframework django-system-monitor\\ dpd-static-support dash_bootstrap_components django-bootstrap4 git clone https://github.com/soerendip/django_proteomics_quality_control cd django_proteomics_quality_control/proteomics_tools pip install -e .","title":"Install and activate environment:"},{"location":"installation/#install-and-start-redis-with","text":"sudo add-apt-repository \"deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) universe\" sudo apt install redis-server Test redis with reis-cli ping which should return > PONG","title":"Install and start redis with:"},{"location":"installation/#nginx","text":"sudo apt install nginx sudo cp config/nginx/omics.conf /etc/nginx/sites-available/ sudo ln -s /etc/nginx/sites-available/omics.conf /etc/nginx/sites-enabled/ sudo systemctl enable nginx","title":"NGINX"},{"location":"installation/#postgres","text":"Django requires a database to be running to store web-site information and make changes persistent. The database can be installed and configured with the following commands: ./scripts/generate_omics_config.sh # creates OMICS.conf source OMICS.conf # customize if needed sudo apt install postgresql postgresql-contrib sudo -u postgres createuser $PGUSER sudo -u postgres createdb omics_server sudo -u postgres psql -c \"ALTER USER pgadmin PASSWORD '$PGPW';\" sudo mkdir $OMICS_PUBLIC_MEDIA_ROOT $OMICS_PRIVATE_MEDIA_ROOT sudo chown $USER $OMICS_PUBLIC_MEDIA_ROOT $OMICS_PRIVATE_MEDIA_ROOT mkdir $OMICS_PUBLIC_MEDIA_ROOT/static Add the secrets to the .bashrc . E.g. with: echo \"export OMICS_QC_SECRET_KEY=`openssl rand -hex 64`\" >> ~/.bashrc echo \"source `pwd`/OMICS.conf\" >> ~/.bashrc The configuration file OMICS.conf contains configuration settings that can be adjusted if needed. For example the title shown in the website, Postgres configurations can be changed here.","title":"Postgres"},{"location":"installation/#run-celery-worker-process","text":"Celerery is a job-queing system that is used to run MaxQuant and RawTools jobs. It can be started manually with the command: cd omics_server celery -A omics_server worker -l info -c 1 -E However, this can be ommited if Supervisor is used to start the cerlery server (see below).","title":"Run celery worker process:"},{"location":"installation/#setup-django","text":"Django is a Python based web-frameworks for perfectionists with deadlines. It is opinionated and brings a lot of functionallity out of the box such as the admin pages that are used to control the Proteomics Pipelines. The Postgres database used by Django needs to be created before the server can run with the following commands: cd omics_server python manage.py makemigrations python manage.py makemigrations pipelines python manage.py migrate python manage.py createsuperuser When the server is updated the first three commands may have to be repeated to update the database.","title":"Setup django"},{"location":"installation/#supervisor","text":"Supervisor is a process contol system that lets programs run as a service. It starts the celery server as well as the django backend and restarts them automatically in case something goes wrong. The configuration file have to be copied to /etc/supervisor/conf.d/ and then supervisor can be started/stopped with the following commands: sudo apt install supervisor sed s+PATH+`pwd`+ config/supervisor/omics_celery_worker.conf > tmp sudo mv tmp /etc/supervisor/conf.d/omics_celery_worker.conf sed s+PATH+`pwd`+ config/supervisor/omics_server.conf > tmp sudo mv tmp /etc/supervisor/conf.d/omics_server.conf sudo supervisorctl reread sudo supervisorctl update sudo supervisorctl stop all sudo supervisorctl start all sudo supervisorctl status all","title":"Supervisor"},{"location":"make/","text":"","title":"Make"},{"location":"manual/","text":"User manual Start the pipeline server and the celery workers. To run the server both the celery workers and the django server have to be started. This can be done running the scripts: scripts/omics_celery_worker.sh scripts/omics_server.sh >Starting omics server >LOAD MAXQUANT DASHBOARD >Dashboard API URL:http://localhost:8000 >URL: http://localhost:8000/api/projects >LOAD PRIMARY DASHBOARD >Serving on http://0.0.0.0:8123 After installation the webinterface can be reached with the browser. By default the server runs on address http://localhost:8123 . This can be changed in the configuration file ( OMICS.conf ). Login with an admin account Setup MaxQuant To setup MaxQuant you can upload a zipped MaxQuant version. Version 1.6.14 works with Mono and is the recommended version to use with the Proteomics Pipelines server. Please contact the MaxQuant mailing list for information on how to obtain older versions. Once you downloaded the zip-file you can upload it to the Pipeline server. Go to 'admin/pipelines/maxquantbin/add' and upload the zip file from Admin / Max quant bins / ADD MAX QUANT BIN . If successful the executable will be selectable under Admin / Max quant setups / ADD MAX QUANT SETUP/ . If this is done you can create your first pipeline. Create first pipeline 1. Create a new project At least one project has to be set up. Navigate to Admin / Projects / ADD PROJECT and provide a name and a description. 2. Upload Fasta File A fasta file with protein sequences has to be uploaded. 3. Upload mqpar.xml A mqpar.xml file has to be provided for each pipeline. It has to be created using the MaxQuant GUI. Only a single .RAW file should be included. 4. Create MaxQuant Setup The MaxQuant Setup defines a pipeline. It is a combination of a MaxQuant binary, a MaxQuant parameter file (mqpar.xml) and a Fasta file. Once created you will be able to submit .RAW files to this pipeline. 5. Setup RawFile type for RawTools","title":"User Manual"},{"location":"manual/#user-manual","text":"","title":"User manual"},{"location":"manual/#start-the-pipeline-server-and-the-celery-workers","text":"To run the server both the celery workers and the django server have to be started. This can be done running the scripts: scripts/omics_celery_worker.sh scripts/omics_server.sh >Starting omics server >LOAD MAXQUANT DASHBOARD >Dashboard API URL:http://localhost:8000 >URL: http://localhost:8000/api/projects >LOAD PRIMARY DASHBOARD >Serving on http://0.0.0.0:8123 After installation the webinterface can be reached with the browser. By default the server runs on address http://localhost:8123 . This can be changed in the configuration file ( OMICS.conf ).","title":"Start the pipeline server and the celery workers."},{"location":"manual/#login-with-an-admin-account","text":"","title":"Login with an admin account"},{"location":"manual/#setup-maxquant","text":"To setup MaxQuant you can upload a zipped MaxQuant version. Version 1.6.14 works with Mono and is the recommended version to use with the Proteomics Pipelines server. Please contact the MaxQuant mailing list for information on how to obtain older versions. Once you downloaded the zip-file you can upload it to the Pipeline server. Go to 'admin/pipelines/maxquantbin/add' and upload the zip file from Admin / Max quant bins / ADD MAX QUANT BIN . If successful the executable will be selectable under Admin / Max quant setups / ADD MAX QUANT SETUP/ . If this is done you can create your first pipeline.","title":"Setup MaxQuant"},{"location":"manual/#create-first-pipeline","text":"","title":"Create first pipeline"},{"location":"manual/#1-create-a-new-project","text":"At least one project has to be set up. Navigate to Admin / Projects / ADD PROJECT and provide a name and a description.","title":"1. Create a new project"},{"location":"manual/#2-upload-fasta-file","text":"A fasta file with protein sequences has to be uploaded.","title":"2. Upload Fasta File"},{"location":"manual/#3-upload-mqparxml","text":"A mqpar.xml file has to be provided for each pipeline. It has to be created using the MaxQuant GUI. Only a single .RAW file should be included.","title":"3. Upload mqpar.xml"},{"location":"manual/#4-create-maxquant-setup","text":"The MaxQuant Setup defines a pipeline. It is a combination of a MaxQuant binary, a MaxQuant parameter file (mqpar.xml) and a Fasta file. Once created you will be able to submit .RAW files to this pipeline.","title":"4. Create MaxQuant Setup"},{"location":"manual/#5-setup-rawfile-type-for-rawtools","text":"","title":"5. Setup RawFile type for RawTools"}]}