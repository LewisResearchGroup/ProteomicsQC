{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Proteomics QC ProteomicsQC\u202fis a Quality Control server for quantiative proteomics with a special emphasis on simplicity and accessibility in a distributed computational environment. Scientists can login, submit files, and explore the results remotely. The software features automatic sample processing for multiple projects by simple drag and drop of proteomics RAW files into a web frontend, an interactive dashboard that integrates machine learning powered explainable anomaly detection, and an API for automated/programmatic access and extensibility. You can find the software repository on Github . And a running version on ResistanceDB . Image elements were taken from Flaticon.com .","title":"Home"},{"location":"#proteomics-qc","text":"ProteomicsQC\u202fis a Quality Control server for quantiative proteomics with a special emphasis on simplicity and accessibility in a distributed computational environment. Scientists can login, submit files, and explore the results remotely. The software features automatic sample processing for multiple projects by simple drag and drop of proteomics RAW files into a web frontend, an interactive dashboard that integrates machine learning powered explainable anomaly detection, and an API for automated/programmatic access and extensibility. You can find the software repository on Github . And a running version on ResistanceDB . Image elements were taken from Flaticon.com .","title":"Proteomics QC"},{"location":"about/","text":"About The LRG Proteomics Pipelines server is maintained by Lewis Research Group at the University of Calgary, Canada. The software can be used free of charge and comes without any warranties for the correctness of the generated results.","title":"About"},{"location":"about/#about","text":"The LRG Proteomics Pipelines server is maintained by Lewis Research Group at the University of Calgary, Canada. The software can be used free of charge and comes without any warranties for the correctness of the generated results.","title":"About"},{"location":"api/","text":"API NOTE: The API is work in progress. We aim to make the API more RESTful in the future. In the following an overview of available routes are provided, as well as, usage examples using CURL. /api/projects Returns a json object with information about all projects on the server. Example: curl -X POST --data project=lsarp https://example.com/api/projects >>> [ { \"pk\": 1, \"name\": \"LSARP\", \"description\": \"This project is very large and applied\", \"slug\": \"lsarp\" }, { \"pk\": 2, \"name\": \"Saliva project\", \"description\": \"The project is about...\", \"slug\": \"saliva\" }, { \"pk\": 3, \"name\": \"SARS-CoV-2 Detection\", \"description\": \"Detection of SARS-CoV-2 Proteins from Patient Samples.\", \"slug\": \"sars-cov-2-detection\" } ] /api/pipelines Returns a json object with information about all MaxQuant pipelines in a certain project. Example: curl -X POST --data project=lsarp https://example.com/api/pipelines >>> [ { \"slug\": \"staphylococcus-aureus-tmt11\", \"name\": \"Staphylococcus aureus (TMT11)\", \"url\": \"https://example.com/datalake/P/P1/P1MQ1\" } ] /api/upload/raw Submits a raw file to an existing pipeline. Raw files can be submitted to an existing pipeline using the API. To submit a raw file the UUID of the user and the target pipeline are required which can be found in the admin detail view of the respective user and pipeline: https://example.com/admin/user/user/1/change/ https://example.com/admin/maxquant/maxquantpipeline/1/change/ Example: curl -v -i -F orig_file=\"@</your/file.raw>\" -F pid=xxx-yyy-zzz -F uid=xxx-yyy-zzz https://example.com/api/upload/raw Alternatively, the python script lrg_upload_raw_file_to_qc_pipeline.py that is part of the lrg_omics packages can be used: python lrg_upload_raw_file_to_qc_pipeline.py --raw your/file.raw --host https://example.com --uid xxx-yyy-zzz --pid xxx-yyy-zzz /api/qc-data This route can be used to download the quality control data from a certain pipeline. Example: curl -X POST --data project=lsarp --data pipeline=sa-tmt11 https://example.com/api/qc-data {\"RawFile\": [\"SA021_210531_C\", \"SA021_210531_D\", \"SA021_210531_E\", \"SA021_210531_F\", \"SA021_210531_H\"], \"Index\": [1.0, 2.0, 3.0, 4.0, 5.0], \"DateAcquired\": [1622476527000000000, 1622483222000000000, 1622492621000000000, 1622499315000000000, 1622512688000000000], \"Instrument\": [\"Orbitrap Fusion Lumos\", \"Orbitrap Fusion Lumos\", \"Orbitrap Fusion Lumos\", \"Orbitrap Fusion Lumos\", \"Orbitrap Fusion Lumos\"], \"ExperimentMsOrder\": [\"Ms2\", \"Ms2\", \"Ms2\", \"Ms2\", \"Ms2\"], \"TotalAnalysisTime(min)\": [99.9253922346667, 99.9313123146833, 99.9273881533167, 99.926844868, 99.9257958661333], \"TotalScans\": [43032, 42644, 42711, 42369, 42833], \"NumMs1Scans\": [5996, 6173, 6133, 6355, 6043], \"NumMs2Scans\": [37036, 36471, 36578, 36014, 36790], \"NumMs3Scans\": [0, 0, 0, 0, 0], \"Ms1ScanRate(/s)\": [1.00007947027767, 1.02954050087278, 1.02290942008649, 1.05994206868614, 1.00791458095158], \"Ms2ScanRate(/s)\": [6.17727539379646, 6.08267805075833, 6.10076321016201, 6.00672756281079, 6.13621999556653], \"Ms3ScanRate(/s)\": [0, 0, 0, 0, 0], \"MeanDutyCycle(s)\": [0.951965903999792, 0.949594528000013, 0.94862161599977, 0.947536128000124, 0.950974272000025], \"MeanMs2TriggerRate(/Ms1Scan)\": [6.17678452301534, 5.90814838814191, 5.96412848524376, 5.66703383162864, 6.08803574383584], \"Ms1MedianSummedIntensity\": [1373091496.7832, 1174184979.02734, 1279266962.39844, 1161303464.01563, 1282214517.42188], \"Ms2MedianSummedIntensity\": [1633995.80926514, 1355357.38024902, 1461732.65924072, 1285265.38223267, 1572994.36050415], \"MedianPrecursorIntensity\": [572243.96875, 482155.71875, 521451.96875, 445561.140625, 521398.25], \"MedianMs1IsolationInterence\": [0.267313288607806, 0.264238075086116, 0.26554694172683, 0.259529487636828, 0.262508095447206], \"MedianMs2PeakFractionConsumingTop80PercentTotalIntensity\": [0.354166666666667, 0.364238410596026, 0.36, 0.363636363636364, 0.356006893386657], \"NumEsiInstabilityFlags\": [1, 3, 0, 12, 4], \"MedianMs1FillTime(ms)\": [1.27314174175262, 1.48821616172791, 1.39801180362701, 1.55530488491058, 1.34955477714539], \"MedianMs2FillTime(ms)\": [86, 86, 86, 86, 86], \"MedianMs3FillTime(ms)\": [NaN, NaN, NaN, NaN, NaN], \"MedianPeakWidthAt10%H(s)\": [28.8155269614892, 29.3934068747652, 29.6827481566525, 30.4683510280734, 30.0636003825315], \"MedianPeakWidthAt50%H(s)\": [11.5410179871052, 11.6453049168208, 11.7461342388454, 11.8654403906942, 11.9581356904507], \"MedianAsymmetryAt10%H\": [1.09751979427411, 1.10183101679795, 1.09483975707686, 1.09099972704928, 1.09248235122764], \"MedianAsymmetryAt50%H\": [1.03279572756282, 1.04327639108573, 1.0352354303321, 1.03152921372008, 1.03189153541257], \"MeanCyclesPerAveragePeak\": [30.2694947796108, 30.9536396936407, 31.2903982536486, 32.1553449285148, 31.6134739579271], \"PeakCapacity\": [519.856808750705, 515.231833432065, 510.789046637421, 505.650368184351, 501.725438255992], \"TimeBeforeFirstExceedanceOf10%MaxIntensity\": [11.2920304712, 11.0928231656, 10.8445925642667, 10.94502254, 10.72725291625], \"TimeAfterLastExceedanceOf10%MaxIntensity\": [5.25216392423333, 5.26415371870002, 5.22221408105, 5.22979773493333, 5.23404510213335], \"FractionOfRunAbove10%MaxIntensity\": [0.834549143222103, 0.836431098158571, 0.839324531675301, 0.838245443052445, 0.840379061914724], \"RawFilePath\": [\"/datalake/P/P36/P36MQ36/inputs/SA021_210531_C\", \"/datalake/P/P36/P36MQ36/inputs/SA021_210531_D\", \"/datalake/P/P36/P36MQ36/inputs/SA021_210531_E\", \"/datalake/P/P36/P36MQ36/inputs/SA021_210531_F\", \"/datalake/P/P36/P36MQ36/inputs/SA021_210531_H\"], \"Date\": [\"2021-05-31\", \"2021-05-31\", \"2021-05-31\", \"2021-05-31\", \"2021-06-01\"], \"Day\": [\"2021-151\", \"2021-151\", \"2021-151\", \"2021-151\", \"2021-152\"], \"Week\": [\"2021-22\", \"2021-22\", \"2021-22\", \"2021-22\", \"2021-22\"], \"Month\": [\"2021-5\", \"2021-5\", \"2021-5\", \"2021-5\", \"2021-6\"], \"Year\": [\"2021\", \"2021\", \"2021\", \"2021\", \"2021\"], \"LRG_omics version\": [NaN, NaN, NaN, NaN, NaN], \"Pipeline\": [NaN, NaN, NaN, NaN, NaN], \"FastaFile\": [NaN, NaN, NaN, NaN, NaN], \"MaxQuantPar\": [NaN, NaN, NaN, NaN, NaN], \"MS\": [5996.0, 6173.0, 6133.0, 6355.0, 6043.0], \"MS/MS\": [37036.0, 36471.0, 36578.0, 36014.0, 36790.0], \"MS3\": [0.0, 0.0, 0.0, 0.0, 0.0], \"MS/MS Submitted\": [43432.0, 42954.0, 42987.0, 42425.0, 43084.0], \"MS/MS Identified\": [125.0, 89.0, 78.0, 123.0, 163.0], \"MS/MS Identified [%]\": [0.29, 0.21, 0.18, 0.29, 0.38], \"Peptide Sequences Identified\": [87.0, 60.0, 50.0, 78.0, 86.0], \"Av. Absolute Mass Deviation [mDa]\": [157970.0, 143820.0, 147220.0, 149600.0, 136680.0], \"Mass Standard Deviation [mDa]\": [168260.0, 151340.0, 156740.0, 158360.0, 146430.0], \"N_protein_groups\": [49, 37, 27, 33, 31], \"N_protein_true_hits\": [3, 3, 3, 3, 3], \"N_protein_potential_contaminants\": [46, 34, 24, 30, 28], \"N_protein_reverse_seq\": [0, 0, 0, 0, 0], \"Protein_mean_seq_cov [%]\": [68.06666666666666, 68.06666666666666, 68.06666666666666, 68.06666666666666, 68.06666666666666], \"TMT1_missing_values\": [0, 0, 0, 1, 1], \"TMT2_missing_values\": [0, 0, 0, 1, 1], \"TMT3_missing_values\": [0, 0, 0, 1, 1], \"TMT4_missing_values\": [0, 0, 0, 1, 1], \"TMT5_missing_values\": [0, 0, 0, 1, 1], \"TMT6_missing_values\": [0, 0, 0, 1, 1], \"TMT7_missing_values\": [0, 0, 0, 1, 1], \"TMT8_missing_values\": [0, 0, 0, 1, 1], \"TMT9_missing_values\": [0, 0, 0, 1, 1], \"TMT10_missing_values\": [0, 0, 0, 1, 1], \"TMT11_missing_values\": [0, 0, 0, 1, 1], \"N_peptides\": [87.0, 60.0, 50.0, 78.0, 86.0], \"N_peptides_potential_contaminants\": [84.0, 57.0, 47.0, 75.0, 83.0], \"N_peptides_reverse\": [0.0, 0.0, 0.0, 0.0, 0.0], \"Oxidations [%]\": [5.75, 3.33, 4.0, 2.56, 3.49], \"N_missed_cleavages_total\": [34.0, 21.0, 12.0, 30.0, 31.0], \"N_missed_cleavages_eq_0 [%]\": [60.92, 65.0, 76.0, 61.54, 63.95], \"N_missed_cleavages_eq_1 [%]\": [29.89, 31.67, 18.0, 19.23, 30.23], \"N_missed_cleavages_eq_2 [%]\": [9.2, 3.33, 6.0, 19.23, 5.81], \"N_missed_cleavages_gt_3 [%]\": [0.0, 0.0, 0.0, 0.0, 0.0], \"N_peptides_last_amino_acid_K [%]\": [68.97, 66.67, 66.0, 61.54, 53.49], \"N_peptides_last_amino_acid_R [%]\": [29.89, 31.67, 32.0, 37.18, 44.19], \"N_peptides_last_amino_acid_other [%]\": [1.15, 1.67, 2.0, 1.28, 2.33], \"Mean_parent_int_frac\": [0.76, 0.76, 0.76, 0.76, 0.76], \"Uncalibrated - Calibrated m/z [ppm] (ave)\": [2.7415011627906978, 2.576863793103448, 2.690334090909091, 2.646644943820225, 2.898638775510204], \"Uncalibrated - Calibrated m/z [ppm] (sd)\": [0.4648552158928993, 0.5576167642368961, 0.3183931831322439, 0.9044888200638536, 0.4135656221237233], \"Uncalibrated - Calibrated m/z [Da] (ave)\": [0.001353795116279, 0.0012787048275862, 0.0014107493181818, 0.0011941075280898, 0.0015648651020408], \"Uncalibrated - Calibrated m/z [Da] (sd)\": [0.0003500341425564, 0.0004812526933493, 0.0004056083979731, 0.0004082370373463, 0.0003700619876708], \"Peak Width(ave)\": [0.8557468807339449, 0.8981167901234568, 0.9357113846153846, 0.8475711428571429, 0.8682191071428571], \"Peak Width (std)\": [0.3173496083683649, 0.3055485354338097, 0.2629870508358037, 0.2870181767441759, 0.3747969534331546], \"qc1_peptide_charges\": [\"[2]\", \"[2, 3]\", \"[2]\", \"[2, 3]\", \"[2, 3]\"], \"N_qc1_missing_values\": [\"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\"], \"reporter_intensity_corrected_qc1_ave\": [118403.54545454546, 336068.1818181818, 121905.0, 216885.45454545456, 321740.9090909091], \"reporter_intensity_corrected_qc1_sd\": [15546.72921674662, 33090.07014421034, 23883.441677522867, 25961.51255000944, 60109.87386059956], \"reporter_intensity_corrected_qc1_cv\": [13.13029027725773, 9.846237143066578, 19.591847485765857, 11.970149222048663, 18.682695349634663], \"calibrated_retention_time_qc1\": [28.592, 28.832, 28.492, 28.89, 28.856], \"retention_length_qc1\": [0.67593, 0.8974, 0.80298, 1.0287, 0.97924], \"N_of_scans_qc1\": [35.0, 44.0, 44.0, 57.0, 42.0], \"qc2_peptide_charges\": [\"[3]\", \"[3]\", \"[3]\", \"[3]\", \"[3]\"], \"N_qc2_missing_values\": [\"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\"], \"reporter_intensity_corrected_qc2_ave\": [10655.045454545456, 10466.681818181818, 9551.090909090908, 7102.845454545453, 10960.081818181818], \"reporter_intensity_corrected_qc2_sd\": [1899.459126537981, 1617.258841271063, 2520.185209808108, 1322.017686144682, 1245.894167997924], \"reporter_intensity_corrected_qc2_cv\": [17.826851463385072, 15.451495224223786, 26.386359776026712, 18.612508108263278, 11.36756265752592], \"calibrated_retention_time_qc2\": [65.516, 65.615, 65.91, 66.219, 65.817], \"retention_length_qc2\": [0.6997, 0.64079, 0.6447, 0.75824, 0.74315], \"N_of_scans_qc2\": [33.0, 28.0, 33.0, 36.0, 34.0], \"N_of_Protein_qc_pepts\": [\"['11;11']\", \"['15;15;3']\", \"['12;12;2']\", \"['14;14']\", \"['14;14']\"], \"N_Protein_qc_missing_values\": [\"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\"], \"reporter_intensity_corrected_Protein_qc_ave\": [2147163.636363636, 2617475.4545454546, 2348207.272727273, 2407727.272727273, 2548828.1818181816], \"reporter_intensity_corrected_Protein_qc_sd\": [628648.0215838767, 846443.44322007, 762162.9915049896, 705718.5546286192, 811398.0259327745], \"reporter_intensity_corrected_Protein_qc_cv\": [29.278067630119413, 32.33816163395739, 32.457228131305136, 29.310568627203367, 31.834159388255497], \"Missed Cleavages [%]\": [39.08, 35.0, 24.0, 38.46, 36.05], \"Flagged\": [false, false, false, false, false], \"Use Downstream\": [true, true, true, true, true]} /api/protein-names This route provides a list of all protein-groups idnentified in a range of files of a specific pipeline. This downlodas a list of protein groups, the fasta headers, the average score, and average intensity. Example: curl -X POST -H 'Content-Type: application/json' --data '{\"project\": \"lsarp\", \"pipeline\": \"s-aureus-new-pan-proteome\", \"data_range\": None, \"add_con\": \"False\", \"add_rev\": \"False\"}' https:/proteomics.resistancedb.org/api/protein-names {\"protein_names\": [\"CON__ENSEMBL:ENSBTAP00000038253\", \"CON__Q05B55\", \"CON__Q7Z3Y8\", \"CON__Q7Z3Y9\", \"CON__Q2YDI2\", \"CON__ENSEMBL:ENSBTAP00000016285\", \"CON__ENSEMBL:ENSBTAP00000007350;CON__P01030\", \"CON__Q03247\", \"CON__P01966\", \"CON__H-INV:HIT000292931\", \"CON__Q3KUS7\", \"CON__Q2HJF0\", \"CON__A2A5Y0\", \"CON__P19012\", \"CON__Q9H552\", \"CON__Q0V8M9\", \"CON__P02777\", \"CON__Q6KB66-1\", \"CON__P02662\", \"CON__Q0VCM5\", \"CON__P05784\", \"CON__Q148H6\", \"CON__Q2UVX4\", \"CON__REFSEQ:XP_932229\", \"CON__Q3MHN5;CON__ENSEMBL:ENSBTAP00000018229\", \"CON__P20930\", \"CON__Q5D862\", \"CON__Q922U2\", \"CON__Q1A7A4\", \"CON__Q28085\", \"CON__Q3SX28\", \"CON__ENSEMBL:ENSBTAP00000025008\", \"CON__P04258\", \"CON__Q9N2I2\", \"CON__Streptavidin\", \"CON__P50448\", \"CON__Q3ZAW8;CON__P08779;CON__P02533;CON__Q9Z2K1;CON__P08727;CON__P19001;CON__Q7Z3Y9;CON__O76013;CON__Q7Z3Y8;CON__A2A4G1;CON__Q497I4;CON__A2AB72;CON__Q6IFX2;CON__Q7Z3Z0;CON__Q9QWL7;CON__Q04695;CON__Q92764;CON__Q9UE12;CON__Q15323;CON__A2A5Y0;CON__Q14525;CON__REFSEQ:XP_986630\", \"CON__Q8BGZ7;CON__O95678\", \"CON__ENSEMBL:ENSBTAP00000016046\", \"CON__Q2KIF2\", \"CON__P17697\", \"CON__Q95121\", \"CON__H-INV:HIT000292931;CON__P05787\", \"CON__Q32PJ2\", \"CON__P02070;CON__Q3SX09\", \"CON__P08727\", \"CON__ENSEMBL:ENSBTAP00000001528\", \"CON__Q28194\", \"CON__Q3TTY5\", \"CON__REFSEQ:XP_001252647;CON__A2I7N3\", \"CON__P00711\", \"CON__Q3MHN2\", \"CON__P07744\", \"CON__Q32MB2\", \"CON__Q2TBQ1\", \"CON__Q3ZBS7\", \"CON__P02676\", \"CON__Q148H6;CON__Q7Z3Y7\", \"CON__Q9D312\", \"CON__Q6NXH9\", \"CON__Q05443\", \"CON__Q3T052\", \"CON__Q9C075\", \"CON__Q6IFX2\", \"CON__H-INV:HIT000292931;CON__P05787;CON__Q9H552\", \"CON__P28800\", \"CON__Q2KJ62;CON__P01044-1\", \"CON__P02666\", \"CON__Q32PI4\", \"CON__Q95M17\", \"CON__Q28107\", \"CON__Q8N1N4-2;CON__Q7RTT2\", \"CON__Q3SY84\", \"CON__Q3SX14\", \"CON__Q3ZBD7\", \"CON__Q6IFU6\", \"CON__P50446\", \"QC2|Peptide2\", \"CON__P35908v2;CON__P35908\", \"CON__Q9R0H5;CON__Q14CN4-1;CON__Q6IME9;CON__Q3SY84;CON__Q6NXH9\", \"CON__P50446;CON__P48668;CON__P04259;CON__P02538\", \"CON__Q6IME9;CON__Q6NXH9\", \"CON__O43790;CON__Q6NT21;CON__P78385;CON__Q14533\", \"CON__P02672\", \"CON__P19013;CON__P07744\", \"CON__P35527\", \"CON__ENSEMBL:ENSBTAP00000024466;CON__ENSEMBL:ENSBTAP00000024462\", \"CON__ENSEMBL:ENSBTAP00000032840\", \"823|Adapter_protein_MecA_1|100.0%\", \"CON__P02768-1\", \"CON__P13645\", \"CON__P02535-1;CON__P13645\", \"CON__P13645;CON__P02535-1\", \"CON__P0C1U8\", \"QC1|Peptide1\", \"CON__P04264\", \"CON__ENSEMBL:ENSBTAP00000038253;CON__P04264\", \"CON__P04264;CON__ENSEMBL:ENSBTAP00000038253\", \"CON__P15636\", \"QC3|BSA;CON__P02769\", \"CON__P02769;QC3|BSA\"], \"Score\": [-2.0, -0.00035682, -0.00015709, 0.0004502, 0.0028997, 0.005782, 0.0086608, 0.018453, 0.019632, 0.031172, 0.03314, 0.046157, 0.12325, 0.14458, 0.17288, 0.25441, 0.30094, 0.59944, 2.6436, 2.8874465, 2.9975735, 3.00492895, 3.185175, 3.2554, 3.44062, 3.971716666666667, 4.001147896666667, 4.0085880000000005, 4.3311, 4.4275805, 4.5179325, 4.9009, 5.710233333333334, 5.7197000000000005, 5.7626, 5.7626, 5.763, 5.7638, 5.7649, 5.7687, 5.7785, 5.7842, 5.7953, 5.8015, 5.8088, 5.8106, 5.8204095, 5.8263, 5.8278, 5.8287, 5.8348, 5.8358, 5.8404, 5.8412, 5.8507, 5.85985, 5.86625, 5.869, 5.8716, 5.8869, 5.888, 5.9492, 5.9554, 5.9554, 5.9554, 5.9554, 5.9619, 5.9619, 6.0408, 6.0565, 6.0921, 6.0939499999999995, 6.1446, 6.1618, 6.1975, 6.5082, 7.5403, 8.193838, 9.253181750000001, 11.529, 11.74, 11.991, 12.225, 12.7810075, 14.165, 22.374, 23.05566, 23.7471, 28.115699999999997, 48.947333333333326, 71.044, 114.85, 122.03105, 266.104, 270.058, 305.36999999999995, 323.31, 323.31, 323.31, 323.31, 323.31], \"Intensity\": [8409900.0, 11054000.0, 0.0, 0.0, 6152600.0, 45442000.0, 252630000.0, 821110000.0, 7537300.0, 0.0, 3730600.0, 46085000.0, 3750700.0, 26828000.0, 24939000.0, 7565600.0, 0.0, 23059000.0, 0.0, 25551700.0, 114805000.0, 53888500.0, 35133000.0, 3966400.0, 47051000.0, 95932400.0, 22793666.666666668, 0.0, 15673750.0, 17165500.0, 41640500.0, 64577666.666666664, 79765666.66666667, 249340000.0, 14302000.0, 12215000.0, 42996000.0, 3811400.0, 25339000.0, 0.0, 84044000.0, 0.0, 126100000.0, 11582000.0, 12202000.0, 25058000.0, 197860500.0, 0.0, 0.0, 909560000.0, 45582000.0, 0.0, 0.0, 74963000.0, 39938000.0, 28655500.0, 0.0, 12411000.0, 690640000.0, 0.0, 15069000.0, 2750966.6666666665, 6625600.0, 10556000.0, 200210000.0, 32296000.0, 0.0, 0.0, 0.0, 3608400.0, 784210000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13143400.0, 21867650.0, 8087300.0, 195500000.0, 0.0, 12589000.0, 32299750.0, 0.0, 524486900.0, 84901200.0, 0.0, 3372080.0, 132846000.0, 1957750.0, 14506000.0, 51801000.0, 458806000.0, 98255000.0, 140660666.66666666, 15708000.0, 20379000.0, 3445960000.0, 3721633333.3333335, 3967550000.0]} /api/protein-groups Use this route to download protein groups related data such as TMT intensities, for specific protein groups and specific raw files. Example: curl -H 'Content-Type: application/json' --data '{\"project\": \"lsarp\", \"pipeline\": \"sa-tmt11\", \"columns\": [\"Reporter intensity corrected\"], \"protein_names\": [\"QC1|Peptide1\"]}' https://example.com/api/protein-groups \"{\\\"RawFile\\\":{\\\"0\\\":\\\"SA021_210531_C.raw\\\",\\\"1\\\":\\\"SA021_210531_D.raw\\\",\\\"2\\\":\\\"SA021_210531_E.raw\\\",\\\"3\\\":\\\"SA021_210531_F.raw\\\",\\\"4\\\":\\\"SA021_210531_H.raw\\\"},\\\"Majority protein IDs\\\":{\\\"0\\\":\\\"QC1|Peptide1\\\",\\\"1\\\":\\\"QC1|Peptide1\\\",\\\"2\\\":\\\"QC1|Peptide1\\\",\\\"3\\\":\\\"QC1|Peptide1\\\",\\\"4\\\":\\\"QC1|Peptide1\\\"},\\\"Reporter intensity corrected 1\\\":{\\\"0\\\":93489.0,\\\"1\\\":351390.0,\\\"2\\\":103270.0,\\\"3\\\":216110.0,\\\"4\\\":228090.0},\\\"Reporter intensity corrected 2\\\":{\\\"0\\\":131730.0,\\\"1\\\":434210.0,\\\"2\\\":103280.0,\\\"3\\\":301800.0,\\\"4\\\":378080.0},\\\"Reporter intensity corrected 3\\\":{\\\"0\\\":103320.0,\\\"1\\\":447160.0,\\\"2\\\":125940.0,\\\"3\\\":314060.0,\\\"4\\\":429110.0},\\\"Reporter intensity corrected 4\\\":{\\\"0\\\":123840.0,\\\"1\\\":428800.0,\\\"2\\\":132820.0,\\\"3\\\":326520.0,\\\"4\\\":374890.0},\\\"Reporter intensity corrected 5\\\":{\\\"0\\\":140250.0,\\\"1\\\":508560.0,\\\"2\\\":189750.0,\\\"3\\\":303540.0,\\\"4\\\":480840.0},\\\"Reporter intensity corrected 6\\\":{\\\"0\\\":137110.0,\\\"1\\\":416800.0,\\\"2\\\":123850.0,\\\"3\\\":372190.0,\\\"4\\\":516980.0},\\\"Reporter intensity corrected 7\\\":{\\\"0\\\":128280.0,\\\"1\\\":405080.0,\\\"2\\\":117990.0,\\\"3\\\":317570.0,\\\"4\\\":415010.0},\\\"Reporter intensity corrected 8\\\":{\\\"0\\\":129650.0,\\\"1\\\":465560.0,\\\"2\\\":112340.0,\\\"3\\\":333770.0,\\\"4\\\":471380.0},\\\"Reporter intensity corrected 9\\\":{\\\"0\\\":105690.0,\\\"1\\\":387750.0,\\\"2\\\":123200.0,\\\"3\\\":280420.0,\\\"4\\\":426380.0},\\\"Reporter intensity corrected 10\\\":{\\\"0\\\":106280.0,\\\"1\\\":355900.0,\\\"2\\\":96945.0,\\\"3\\\":287530.0,\\\"4\\\":425780.0},\\\"Reporter intensity corrected 11\\\":{\\\"0\\\":102800.0,\\\"1\\\":420890.0,\\\"2\\\":111570.0,\\\"3\\\":290750.0,\\\"4\\\":361690.0}}\" /api/rawfile This route can be used to modify raw files. Actions are: flag - Flag a raw file as anomaly. unflag - Unflag a raw file. accept - Accept file for downstream use. reject - Reject file for downstream use. The json block has to contain the user UID from the QC pipeline for authentification, project and pipeline slug, and a list of raw file names to be modified. Example: curl -H 'Content-Type: application/json' --data '{\"project\": \"lsarp\", \"pipeline\": \"sa-tmt11\", \"raw_file\": [\"SA001.raw\"], \"action\": \"unflag\", \"uid\": \"xxx-yyy-zzz\"}'","title":"API"},{"location":"api/#api","text":"NOTE: The API is work in progress. We aim to make the API more RESTful in the future. In the following an overview of available routes are provided, as well as, usage examples using CURL.","title":"API"},{"location":"api/#apiprojects","text":"Returns a json object with information about all projects on the server. Example: curl -X POST --data project=lsarp https://example.com/api/projects >>> [ { \"pk\": 1, \"name\": \"LSARP\", \"description\": \"This project is very large and applied\", \"slug\": \"lsarp\" }, { \"pk\": 2, \"name\": \"Saliva project\", \"description\": \"The project is about...\", \"slug\": \"saliva\" }, { \"pk\": 3, \"name\": \"SARS-CoV-2 Detection\", \"description\": \"Detection of SARS-CoV-2 Proteins from Patient Samples.\", \"slug\": \"sars-cov-2-detection\" } ]","title":"/api/projects"},{"location":"api/#apipipelines","text":"Returns a json object with information about all MaxQuant pipelines in a certain project. Example: curl -X POST --data project=lsarp https://example.com/api/pipelines >>> [ { \"slug\": \"staphylococcus-aureus-tmt11\", \"name\": \"Staphylococcus aureus (TMT11)\", \"url\": \"https://example.com/datalake/P/P1/P1MQ1\" } ]","title":"/api/pipelines"},{"location":"api/#apiuploadraw","text":"Submits a raw file to an existing pipeline. Raw files can be submitted to an existing pipeline using the API. To submit a raw file the UUID of the user and the target pipeline are required which can be found in the admin detail view of the respective user and pipeline: https://example.com/admin/user/user/1/change/ https://example.com/admin/maxquant/maxquantpipeline/1/change/ Example: curl -v -i -F orig_file=\"@</your/file.raw>\" -F pid=xxx-yyy-zzz -F uid=xxx-yyy-zzz https://example.com/api/upload/raw Alternatively, the python script lrg_upload_raw_file_to_qc_pipeline.py that is part of the lrg_omics packages can be used: python lrg_upload_raw_file_to_qc_pipeline.py --raw your/file.raw --host https://example.com --uid xxx-yyy-zzz --pid xxx-yyy-zzz","title":"/api/upload/raw"},{"location":"api/#apiqc-data","text":"This route can be used to download the quality control data from a certain pipeline. Example: curl -X POST --data project=lsarp --data pipeline=sa-tmt11 https://example.com/api/qc-data {\"RawFile\": [\"SA021_210531_C\", \"SA021_210531_D\", \"SA021_210531_E\", \"SA021_210531_F\", \"SA021_210531_H\"], \"Index\": [1.0, 2.0, 3.0, 4.0, 5.0], \"DateAcquired\": [1622476527000000000, 1622483222000000000, 1622492621000000000, 1622499315000000000, 1622512688000000000], \"Instrument\": [\"Orbitrap Fusion Lumos\", \"Orbitrap Fusion Lumos\", \"Orbitrap Fusion Lumos\", \"Orbitrap Fusion Lumos\", \"Orbitrap Fusion Lumos\"], \"ExperimentMsOrder\": [\"Ms2\", \"Ms2\", \"Ms2\", \"Ms2\", \"Ms2\"], \"TotalAnalysisTime(min)\": [99.9253922346667, 99.9313123146833, 99.9273881533167, 99.926844868, 99.9257958661333], \"TotalScans\": [43032, 42644, 42711, 42369, 42833], \"NumMs1Scans\": [5996, 6173, 6133, 6355, 6043], \"NumMs2Scans\": [37036, 36471, 36578, 36014, 36790], \"NumMs3Scans\": [0, 0, 0, 0, 0], \"Ms1ScanRate(/s)\": [1.00007947027767, 1.02954050087278, 1.02290942008649, 1.05994206868614, 1.00791458095158], \"Ms2ScanRate(/s)\": [6.17727539379646, 6.08267805075833, 6.10076321016201, 6.00672756281079, 6.13621999556653], \"Ms3ScanRate(/s)\": [0, 0, 0, 0, 0], \"MeanDutyCycle(s)\": [0.951965903999792, 0.949594528000013, 0.94862161599977, 0.947536128000124, 0.950974272000025], \"MeanMs2TriggerRate(/Ms1Scan)\": [6.17678452301534, 5.90814838814191, 5.96412848524376, 5.66703383162864, 6.08803574383584], \"Ms1MedianSummedIntensity\": [1373091496.7832, 1174184979.02734, 1279266962.39844, 1161303464.01563, 1282214517.42188], \"Ms2MedianSummedIntensity\": [1633995.80926514, 1355357.38024902, 1461732.65924072, 1285265.38223267, 1572994.36050415], \"MedianPrecursorIntensity\": [572243.96875, 482155.71875, 521451.96875, 445561.140625, 521398.25], \"MedianMs1IsolationInterence\": [0.267313288607806, 0.264238075086116, 0.26554694172683, 0.259529487636828, 0.262508095447206], \"MedianMs2PeakFractionConsumingTop80PercentTotalIntensity\": [0.354166666666667, 0.364238410596026, 0.36, 0.363636363636364, 0.356006893386657], \"NumEsiInstabilityFlags\": [1, 3, 0, 12, 4], \"MedianMs1FillTime(ms)\": [1.27314174175262, 1.48821616172791, 1.39801180362701, 1.55530488491058, 1.34955477714539], \"MedianMs2FillTime(ms)\": [86, 86, 86, 86, 86], \"MedianMs3FillTime(ms)\": [NaN, NaN, NaN, NaN, NaN], \"MedianPeakWidthAt10%H(s)\": [28.8155269614892, 29.3934068747652, 29.6827481566525, 30.4683510280734, 30.0636003825315], \"MedianPeakWidthAt50%H(s)\": [11.5410179871052, 11.6453049168208, 11.7461342388454, 11.8654403906942, 11.9581356904507], \"MedianAsymmetryAt10%H\": [1.09751979427411, 1.10183101679795, 1.09483975707686, 1.09099972704928, 1.09248235122764], \"MedianAsymmetryAt50%H\": [1.03279572756282, 1.04327639108573, 1.0352354303321, 1.03152921372008, 1.03189153541257], \"MeanCyclesPerAveragePeak\": [30.2694947796108, 30.9536396936407, 31.2903982536486, 32.1553449285148, 31.6134739579271], \"PeakCapacity\": [519.856808750705, 515.231833432065, 510.789046637421, 505.650368184351, 501.725438255992], \"TimeBeforeFirstExceedanceOf10%MaxIntensity\": [11.2920304712, 11.0928231656, 10.8445925642667, 10.94502254, 10.72725291625], \"TimeAfterLastExceedanceOf10%MaxIntensity\": [5.25216392423333, 5.26415371870002, 5.22221408105, 5.22979773493333, 5.23404510213335], \"FractionOfRunAbove10%MaxIntensity\": [0.834549143222103, 0.836431098158571, 0.839324531675301, 0.838245443052445, 0.840379061914724], \"RawFilePath\": [\"/datalake/P/P36/P36MQ36/inputs/SA021_210531_C\", \"/datalake/P/P36/P36MQ36/inputs/SA021_210531_D\", \"/datalake/P/P36/P36MQ36/inputs/SA021_210531_E\", \"/datalake/P/P36/P36MQ36/inputs/SA021_210531_F\", \"/datalake/P/P36/P36MQ36/inputs/SA021_210531_H\"], \"Date\": [\"2021-05-31\", \"2021-05-31\", \"2021-05-31\", \"2021-05-31\", \"2021-06-01\"], \"Day\": [\"2021-151\", \"2021-151\", \"2021-151\", \"2021-151\", \"2021-152\"], \"Week\": [\"2021-22\", \"2021-22\", \"2021-22\", \"2021-22\", \"2021-22\"], \"Month\": [\"2021-5\", \"2021-5\", \"2021-5\", \"2021-5\", \"2021-6\"], \"Year\": [\"2021\", \"2021\", \"2021\", \"2021\", \"2021\"], \"LRG_omics version\": [NaN, NaN, NaN, NaN, NaN], \"Pipeline\": [NaN, NaN, NaN, NaN, NaN], \"FastaFile\": [NaN, NaN, NaN, NaN, NaN], \"MaxQuantPar\": [NaN, NaN, NaN, NaN, NaN], \"MS\": [5996.0, 6173.0, 6133.0, 6355.0, 6043.0], \"MS/MS\": [37036.0, 36471.0, 36578.0, 36014.0, 36790.0], \"MS3\": [0.0, 0.0, 0.0, 0.0, 0.0], \"MS/MS Submitted\": [43432.0, 42954.0, 42987.0, 42425.0, 43084.0], \"MS/MS Identified\": [125.0, 89.0, 78.0, 123.0, 163.0], \"MS/MS Identified [%]\": [0.29, 0.21, 0.18, 0.29, 0.38], \"Peptide Sequences Identified\": [87.0, 60.0, 50.0, 78.0, 86.0], \"Av. Absolute Mass Deviation [mDa]\": [157970.0, 143820.0, 147220.0, 149600.0, 136680.0], \"Mass Standard Deviation [mDa]\": [168260.0, 151340.0, 156740.0, 158360.0, 146430.0], \"N_protein_groups\": [49, 37, 27, 33, 31], \"N_protein_true_hits\": [3, 3, 3, 3, 3], \"N_protein_potential_contaminants\": [46, 34, 24, 30, 28], \"N_protein_reverse_seq\": [0, 0, 0, 0, 0], \"Protein_mean_seq_cov [%]\": [68.06666666666666, 68.06666666666666, 68.06666666666666, 68.06666666666666, 68.06666666666666], \"TMT1_missing_values\": [0, 0, 0, 1, 1], \"TMT2_missing_values\": [0, 0, 0, 1, 1], \"TMT3_missing_values\": [0, 0, 0, 1, 1], \"TMT4_missing_values\": [0, 0, 0, 1, 1], \"TMT5_missing_values\": [0, 0, 0, 1, 1], \"TMT6_missing_values\": [0, 0, 0, 1, 1], \"TMT7_missing_values\": [0, 0, 0, 1, 1], \"TMT8_missing_values\": [0, 0, 0, 1, 1], \"TMT9_missing_values\": [0, 0, 0, 1, 1], \"TMT10_missing_values\": [0, 0, 0, 1, 1], \"TMT11_missing_values\": [0, 0, 0, 1, 1], \"N_peptides\": [87.0, 60.0, 50.0, 78.0, 86.0], \"N_peptides_potential_contaminants\": [84.0, 57.0, 47.0, 75.0, 83.0], \"N_peptides_reverse\": [0.0, 0.0, 0.0, 0.0, 0.0], \"Oxidations [%]\": [5.75, 3.33, 4.0, 2.56, 3.49], \"N_missed_cleavages_total\": [34.0, 21.0, 12.0, 30.0, 31.0], \"N_missed_cleavages_eq_0 [%]\": [60.92, 65.0, 76.0, 61.54, 63.95], \"N_missed_cleavages_eq_1 [%]\": [29.89, 31.67, 18.0, 19.23, 30.23], \"N_missed_cleavages_eq_2 [%]\": [9.2, 3.33, 6.0, 19.23, 5.81], \"N_missed_cleavages_gt_3 [%]\": [0.0, 0.0, 0.0, 0.0, 0.0], \"N_peptides_last_amino_acid_K [%]\": [68.97, 66.67, 66.0, 61.54, 53.49], \"N_peptides_last_amino_acid_R [%]\": [29.89, 31.67, 32.0, 37.18, 44.19], \"N_peptides_last_amino_acid_other [%]\": [1.15, 1.67, 2.0, 1.28, 2.33], \"Mean_parent_int_frac\": [0.76, 0.76, 0.76, 0.76, 0.76], \"Uncalibrated - Calibrated m/z [ppm] (ave)\": [2.7415011627906978, 2.576863793103448, 2.690334090909091, 2.646644943820225, 2.898638775510204], \"Uncalibrated - Calibrated m/z [ppm] (sd)\": [0.4648552158928993, 0.5576167642368961, 0.3183931831322439, 0.9044888200638536, 0.4135656221237233], \"Uncalibrated - Calibrated m/z [Da] (ave)\": [0.001353795116279, 0.0012787048275862, 0.0014107493181818, 0.0011941075280898, 0.0015648651020408], \"Uncalibrated - Calibrated m/z [Da] (sd)\": [0.0003500341425564, 0.0004812526933493, 0.0004056083979731, 0.0004082370373463, 0.0003700619876708], \"Peak Width(ave)\": [0.8557468807339449, 0.8981167901234568, 0.9357113846153846, 0.8475711428571429, 0.8682191071428571], \"Peak Width (std)\": [0.3173496083683649, 0.3055485354338097, 0.2629870508358037, 0.2870181767441759, 0.3747969534331546], \"qc1_peptide_charges\": [\"[2]\", \"[2, 3]\", \"[2]\", \"[2, 3]\", \"[2, 3]\"], \"N_qc1_missing_values\": [\"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\"], \"reporter_intensity_corrected_qc1_ave\": [118403.54545454546, 336068.1818181818, 121905.0, 216885.45454545456, 321740.9090909091], \"reporter_intensity_corrected_qc1_sd\": [15546.72921674662, 33090.07014421034, 23883.441677522867, 25961.51255000944, 60109.87386059956], \"reporter_intensity_corrected_qc1_cv\": [13.13029027725773, 9.846237143066578, 19.591847485765857, 11.970149222048663, 18.682695349634663], \"calibrated_retention_time_qc1\": [28.592, 28.832, 28.492, 28.89, 28.856], \"retention_length_qc1\": [0.67593, 0.8974, 0.80298, 1.0287, 0.97924], \"N_of_scans_qc1\": [35.0, 44.0, 44.0, 57.0, 42.0], \"qc2_peptide_charges\": [\"[3]\", \"[3]\", \"[3]\", \"[3]\", \"[3]\"], \"N_qc2_missing_values\": [\"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\"], \"reporter_intensity_corrected_qc2_ave\": [10655.045454545456, 10466.681818181818, 9551.090909090908, 7102.845454545453, 10960.081818181818], \"reporter_intensity_corrected_qc2_sd\": [1899.459126537981, 1617.258841271063, 2520.185209808108, 1322.017686144682, 1245.894167997924], \"reporter_intensity_corrected_qc2_cv\": [17.826851463385072, 15.451495224223786, 26.386359776026712, 18.612508108263278, 11.36756265752592], \"calibrated_retention_time_qc2\": [65.516, 65.615, 65.91, 66.219, 65.817], \"retention_length_qc2\": [0.6997, 0.64079, 0.6447, 0.75824, 0.74315], \"N_of_scans_qc2\": [33.0, 28.0, 33.0, 36.0, 34.0], \"N_of_Protein_qc_pepts\": [\"['11;11']\", \"['15;15;3']\", \"['12;12;2']\", \"['14;14']\", \"['14;14']\"], \"N_Protein_qc_missing_values\": [\"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\", \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\"], \"reporter_intensity_corrected_Protein_qc_ave\": [2147163.636363636, 2617475.4545454546, 2348207.272727273, 2407727.272727273, 2548828.1818181816], \"reporter_intensity_corrected_Protein_qc_sd\": [628648.0215838767, 846443.44322007, 762162.9915049896, 705718.5546286192, 811398.0259327745], \"reporter_intensity_corrected_Protein_qc_cv\": [29.278067630119413, 32.33816163395739, 32.457228131305136, 29.310568627203367, 31.834159388255497], \"Missed Cleavages [%]\": [39.08, 35.0, 24.0, 38.46, 36.05], \"Flagged\": [false, false, false, false, false], \"Use Downstream\": [true, true, true, true, true]}","title":"/api/qc-data"},{"location":"api/#apiprotein-names","text":"This route provides a list of all protein-groups idnentified in a range of files of a specific pipeline. This downlodas a list of protein groups, the fasta headers, the average score, and average intensity. Example: curl -X POST -H 'Content-Type: application/json' --data '{\"project\": \"lsarp\", \"pipeline\": \"s-aureus-new-pan-proteome\", \"data_range\": None, \"add_con\": \"False\", \"add_rev\": \"False\"}' https:/proteomics.resistancedb.org/api/protein-names {\"protein_names\": [\"CON__ENSEMBL:ENSBTAP00000038253\", \"CON__Q05B55\", \"CON__Q7Z3Y8\", \"CON__Q7Z3Y9\", \"CON__Q2YDI2\", \"CON__ENSEMBL:ENSBTAP00000016285\", \"CON__ENSEMBL:ENSBTAP00000007350;CON__P01030\", \"CON__Q03247\", \"CON__P01966\", \"CON__H-INV:HIT000292931\", \"CON__Q3KUS7\", \"CON__Q2HJF0\", \"CON__A2A5Y0\", \"CON__P19012\", \"CON__Q9H552\", \"CON__Q0V8M9\", \"CON__P02777\", \"CON__Q6KB66-1\", \"CON__P02662\", \"CON__Q0VCM5\", \"CON__P05784\", \"CON__Q148H6\", \"CON__Q2UVX4\", \"CON__REFSEQ:XP_932229\", \"CON__Q3MHN5;CON__ENSEMBL:ENSBTAP00000018229\", \"CON__P20930\", \"CON__Q5D862\", \"CON__Q922U2\", \"CON__Q1A7A4\", \"CON__Q28085\", \"CON__Q3SX28\", \"CON__ENSEMBL:ENSBTAP00000025008\", \"CON__P04258\", \"CON__Q9N2I2\", \"CON__Streptavidin\", \"CON__P50448\", \"CON__Q3ZAW8;CON__P08779;CON__P02533;CON__Q9Z2K1;CON__P08727;CON__P19001;CON__Q7Z3Y9;CON__O76013;CON__Q7Z3Y8;CON__A2A4G1;CON__Q497I4;CON__A2AB72;CON__Q6IFX2;CON__Q7Z3Z0;CON__Q9QWL7;CON__Q04695;CON__Q92764;CON__Q9UE12;CON__Q15323;CON__A2A5Y0;CON__Q14525;CON__REFSEQ:XP_986630\", \"CON__Q8BGZ7;CON__O95678\", \"CON__ENSEMBL:ENSBTAP00000016046\", \"CON__Q2KIF2\", \"CON__P17697\", \"CON__Q95121\", \"CON__H-INV:HIT000292931;CON__P05787\", \"CON__Q32PJ2\", \"CON__P02070;CON__Q3SX09\", \"CON__P08727\", \"CON__ENSEMBL:ENSBTAP00000001528\", \"CON__Q28194\", \"CON__Q3TTY5\", \"CON__REFSEQ:XP_001252647;CON__A2I7N3\", \"CON__P00711\", \"CON__Q3MHN2\", \"CON__P07744\", \"CON__Q32MB2\", \"CON__Q2TBQ1\", \"CON__Q3ZBS7\", \"CON__P02676\", \"CON__Q148H6;CON__Q7Z3Y7\", \"CON__Q9D312\", \"CON__Q6NXH9\", \"CON__Q05443\", \"CON__Q3T052\", \"CON__Q9C075\", \"CON__Q6IFX2\", \"CON__H-INV:HIT000292931;CON__P05787;CON__Q9H552\", \"CON__P28800\", \"CON__Q2KJ62;CON__P01044-1\", \"CON__P02666\", \"CON__Q32PI4\", \"CON__Q95M17\", \"CON__Q28107\", \"CON__Q8N1N4-2;CON__Q7RTT2\", \"CON__Q3SY84\", \"CON__Q3SX14\", \"CON__Q3ZBD7\", \"CON__Q6IFU6\", \"CON__P50446\", \"QC2|Peptide2\", \"CON__P35908v2;CON__P35908\", \"CON__Q9R0H5;CON__Q14CN4-1;CON__Q6IME9;CON__Q3SY84;CON__Q6NXH9\", \"CON__P50446;CON__P48668;CON__P04259;CON__P02538\", \"CON__Q6IME9;CON__Q6NXH9\", \"CON__O43790;CON__Q6NT21;CON__P78385;CON__Q14533\", \"CON__P02672\", \"CON__P19013;CON__P07744\", \"CON__P35527\", \"CON__ENSEMBL:ENSBTAP00000024466;CON__ENSEMBL:ENSBTAP00000024462\", \"CON__ENSEMBL:ENSBTAP00000032840\", \"823|Adapter_protein_MecA_1|100.0%\", \"CON__P02768-1\", \"CON__P13645\", \"CON__P02535-1;CON__P13645\", \"CON__P13645;CON__P02535-1\", \"CON__P0C1U8\", \"QC1|Peptide1\", \"CON__P04264\", \"CON__ENSEMBL:ENSBTAP00000038253;CON__P04264\", \"CON__P04264;CON__ENSEMBL:ENSBTAP00000038253\", \"CON__P15636\", \"QC3|BSA;CON__P02769\", \"CON__P02769;QC3|BSA\"], \"Score\": [-2.0, -0.00035682, -0.00015709, 0.0004502, 0.0028997, 0.005782, 0.0086608, 0.018453, 0.019632, 0.031172, 0.03314, 0.046157, 0.12325, 0.14458, 0.17288, 0.25441, 0.30094, 0.59944, 2.6436, 2.8874465, 2.9975735, 3.00492895, 3.185175, 3.2554, 3.44062, 3.971716666666667, 4.001147896666667, 4.0085880000000005, 4.3311, 4.4275805, 4.5179325, 4.9009, 5.710233333333334, 5.7197000000000005, 5.7626, 5.7626, 5.763, 5.7638, 5.7649, 5.7687, 5.7785, 5.7842, 5.7953, 5.8015, 5.8088, 5.8106, 5.8204095, 5.8263, 5.8278, 5.8287, 5.8348, 5.8358, 5.8404, 5.8412, 5.8507, 5.85985, 5.86625, 5.869, 5.8716, 5.8869, 5.888, 5.9492, 5.9554, 5.9554, 5.9554, 5.9554, 5.9619, 5.9619, 6.0408, 6.0565, 6.0921, 6.0939499999999995, 6.1446, 6.1618, 6.1975, 6.5082, 7.5403, 8.193838, 9.253181750000001, 11.529, 11.74, 11.991, 12.225, 12.7810075, 14.165, 22.374, 23.05566, 23.7471, 28.115699999999997, 48.947333333333326, 71.044, 114.85, 122.03105, 266.104, 270.058, 305.36999999999995, 323.31, 323.31, 323.31, 323.31, 323.31], \"Intensity\": [8409900.0, 11054000.0, 0.0, 0.0, 6152600.0, 45442000.0, 252630000.0, 821110000.0, 7537300.0, 0.0, 3730600.0, 46085000.0, 3750700.0, 26828000.0, 24939000.0, 7565600.0, 0.0, 23059000.0, 0.0, 25551700.0, 114805000.0, 53888500.0, 35133000.0, 3966400.0, 47051000.0, 95932400.0, 22793666.666666668, 0.0, 15673750.0, 17165500.0, 41640500.0, 64577666.666666664, 79765666.66666667, 249340000.0, 14302000.0, 12215000.0, 42996000.0, 3811400.0, 25339000.0, 0.0, 84044000.0, 0.0, 126100000.0, 11582000.0, 12202000.0, 25058000.0, 197860500.0, 0.0, 0.0, 909560000.0, 45582000.0, 0.0, 0.0, 74963000.0, 39938000.0, 28655500.0, 0.0, 12411000.0, 690640000.0, 0.0, 15069000.0, 2750966.6666666665, 6625600.0, 10556000.0, 200210000.0, 32296000.0, 0.0, 0.0, 0.0, 3608400.0, 784210000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13143400.0, 21867650.0, 8087300.0, 195500000.0, 0.0, 12589000.0, 32299750.0, 0.0, 524486900.0, 84901200.0, 0.0, 3372080.0, 132846000.0, 1957750.0, 14506000.0, 51801000.0, 458806000.0, 98255000.0, 140660666.66666666, 15708000.0, 20379000.0, 3445960000.0, 3721633333.3333335, 3967550000.0]}","title":"/api/protein-names"},{"location":"api/#apiprotein-groups","text":"Use this route to download protein groups related data such as TMT intensities, for specific protein groups and specific raw files. Example: curl -H 'Content-Type: application/json' --data '{\"project\": \"lsarp\", \"pipeline\": \"sa-tmt11\", \"columns\": [\"Reporter intensity corrected\"], \"protein_names\": [\"QC1|Peptide1\"]}' https://example.com/api/protein-groups \"{\\\"RawFile\\\":{\\\"0\\\":\\\"SA021_210531_C.raw\\\",\\\"1\\\":\\\"SA021_210531_D.raw\\\",\\\"2\\\":\\\"SA021_210531_E.raw\\\",\\\"3\\\":\\\"SA021_210531_F.raw\\\",\\\"4\\\":\\\"SA021_210531_H.raw\\\"},\\\"Majority protein IDs\\\":{\\\"0\\\":\\\"QC1|Peptide1\\\",\\\"1\\\":\\\"QC1|Peptide1\\\",\\\"2\\\":\\\"QC1|Peptide1\\\",\\\"3\\\":\\\"QC1|Peptide1\\\",\\\"4\\\":\\\"QC1|Peptide1\\\"},\\\"Reporter intensity corrected 1\\\":{\\\"0\\\":93489.0,\\\"1\\\":351390.0,\\\"2\\\":103270.0,\\\"3\\\":216110.0,\\\"4\\\":228090.0},\\\"Reporter intensity corrected 2\\\":{\\\"0\\\":131730.0,\\\"1\\\":434210.0,\\\"2\\\":103280.0,\\\"3\\\":301800.0,\\\"4\\\":378080.0},\\\"Reporter intensity corrected 3\\\":{\\\"0\\\":103320.0,\\\"1\\\":447160.0,\\\"2\\\":125940.0,\\\"3\\\":314060.0,\\\"4\\\":429110.0},\\\"Reporter intensity corrected 4\\\":{\\\"0\\\":123840.0,\\\"1\\\":428800.0,\\\"2\\\":132820.0,\\\"3\\\":326520.0,\\\"4\\\":374890.0},\\\"Reporter intensity corrected 5\\\":{\\\"0\\\":140250.0,\\\"1\\\":508560.0,\\\"2\\\":189750.0,\\\"3\\\":303540.0,\\\"4\\\":480840.0},\\\"Reporter intensity corrected 6\\\":{\\\"0\\\":137110.0,\\\"1\\\":416800.0,\\\"2\\\":123850.0,\\\"3\\\":372190.0,\\\"4\\\":516980.0},\\\"Reporter intensity corrected 7\\\":{\\\"0\\\":128280.0,\\\"1\\\":405080.0,\\\"2\\\":117990.0,\\\"3\\\":317570.0,\\\"4\\\":415010.0},\\\"Reporter intensity corrected 8\\\":{\\\"0\\\":129650.0,\\\"1\\\":465560.0,\\\"2\\\":112340.0,\\\"3\\\":333770.0,\\\"4\\\":471380.0},\\\"Reporter intensity corrected 9\\\":{\\\"0\\\":105690.0,\\\"1\\\":387750.0,\\\"2\\\":123200.0,\\\"3\\\":280420.0,\\\"4\\\":426380.0},\\\"Reporter intensity corrected 10\\\":{\\\"0\\\":106280.0,\\\"1\\\":355900.0,\\\"2\\\":96945.0,\\\"3\\\":287530.0,\\\"4\\\":425780.0},\\\"Reporter intensity corrected 11\\\":{\\\"0\\\":102800.0,\\\"1\\\":420890.0,\\\"2\\\":111570.0,\\\"3\\\":290750.0,\\\"4\\\":361690.0}}\"","title":"/api/protein-groups"},{"location":"api/#apirawfile","text":"This route can be used to modify raw files. Actions are: flag - Flag a raw file as anomaly. unflag - Unflag a raw file. accept - Accept file for downstream use. reject - Reject file for downstream use. The json block has to contain the user UID from the QC pipeline for authentification, project and pipeline slug, and a list of raw file names to be modified. Example: curl -H 'Content-Type: application/json' --data '{\"project\": \"lsarp\", \"pipeline\": \"sa-tmt11\", \"raw_file\": [\"SA001.raw\"], \"action\": \"unflag\", \"uid\": \"xxx-yyy-zzz\"}'","title":"/api/rawfile"},{"location":"datalake/","text":"The datalake The datalake is the central data storage of the proteomics pipelines framework. Its location is shared with the web-site and celery workers. The location of the data lake on the host system can be controled with the DATALAKE=/var/www/html/omics/datalake variable in the .env file. /var/www/html/omics/datalake/ \u251c\u2500\u2500 P \u2502 \u2514\u2500\u2500 P1 \u2502 \u2514\u2500\u2500 P1MQ1 \u2502 \u251c\u2500\u2500 config \u2502 \u2502 \u251c\u2500\u2500 fasta.faa \u2502 \u2502 \u2514\u2500\u2500 mqpar.xml \u2502 \u251c\u2500\u2500 inputs \u2502 \u2502 \u251c\u2500\u2500 fake3 \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-A-200507 \u2502 \u2502 \u2502 \u2514\u2500\u2500 SA001-R1-A-200507.raw \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-B-200507 \u2502 \u2502 \u2502 \u2514\u2500\u2500 SA001-R1-B-200507.raw ... The proteomics jobs read the input files from the datalake from the config and input folders of the current project and write the MaxQuant and RawTools output to the corresponding output directory. The output directory is organized by file , so that all data from one file is collected in one subfolder. ... \u2502 \u251c\u2500\u2500 output \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-A-200507.raw \u2502 \u2502 \u2502 \u251c\u2500\u2500 maxquant \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 allPeptides.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 evidence.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 libraryMatch.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 matchedFeatures.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 maxquant_quality_control.csv \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 modificationSpecificPeptides.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ms3Scans.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 msmsScans.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 msms.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mzRange.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 Oxidation (M)Sites.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 parameters.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 peptides.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 proteinGroups.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 summary.txt \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 tables.pdf \u2502 \u2502 \u2502 \u251c\u2500\u2500 rawtools \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 rawtools_log.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 rawtools_metrics.err \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 rawtools_metrics.out \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-A-200507.raw_Matrix.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-A-200507.raw_Metrics.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-A-200507.raw.mgf \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-A-200507.raw_Ms2_BP_chromatogram.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-A-200507.raw_Ms2_TIC_chromatogram.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-A-200507.raw_Ms_BP_chromatogram.txt \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 SA001-R1-A-200507.raw_Ms_TIC_chromatogram.txt \u2502 \u2502 \u2502 \u2514\u2500\u2500 rawtools_qc \u2502 \u2502 \u2502 \u251c\u2500\u2500 QcDataTable.csv \u2502 \u2502 \u2502 \u251c\u2500\u2500 QC.xml \u2502 \u2502 \u2502 \u251c\u2500\u2500 rawtools_log.txt \u2502 \u2502 \u2502 \u251c\u2500\u2500 rawtools_qc.err \u2502 \u2502 \u2502 \u2514\u2500\u2500 rawtools_qc.out ... Certain fractions of the data are cleaned and stored in a columnar data format ( parquet ) to enable fast reads. This data is a simplified and standardized version of the data in the output folder and can be regenerated easily and is organized by data type rather than by input file, in contrast to the output directory. \u2502 \u251c\u2500\u2500 parquet \u2502 \u2502 \u2514\u2500\u2500 protein_groups \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-A-200507.parquet \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-B-200507.parquet \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-blank-200507.parquet \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-C-200507.parquet \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-D-200507.parquet \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-E-200507.parquet ...","title":"Datalake"},{"location":"datalake/#the-datalake","text":"The datalake is the central data storage of the proteomics pipelines framework. Its location is shared with the web-site and celery workers. The location of the data lake on the host system can be controled with the DATALAKE=/var/www/html/omics/datalake variable in the .env file. /var/www/html/omics/datalake/ \u251c\u2500\u2500 P \u2502 \u2514\u2500\u2500 P1 \u2502 \u2514\u2500\u2500 P1MQ1 \u2502 \u251c\u2500\u2500 config \u2502 \u2502 \u251c\u2500\u2500 fasta.faa \u2502 \u2502 \u2514\u2500\u2500 mqpar.xml \u2502 \u251c\u2500\u2500 inputs \u2502 \u2502 \u251c\u2500\u2500 fake3 \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-A-200507 \u2502 \u2502 \u2502 \u2514\u2500\u2500 SA001-R1-A-200507.raw \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-B-200507 \u2502 \u2502 \u2502 \u2514\u2500\u2500 SA001-R1-B-200507.raw ... The proteomics jobs read the input files from the datalake from the config and input folders of the current project and write the MaxQuant and RawTools output to the corresponding output directory. The output directory is organized by file , so that all data from one file is collected in one subfolder. ... \u2502 \u251c\u2500\u2500 output \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-A-200507.raw \u2502 \u2502 \u2502 \u251c\u2500\u2500 maxquant \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 allPeptides.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 evidence.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 libraryMatch.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 matchedFeatures.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 maxquant_quality_control.csv \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 modificationSpecificPeptides.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ms3Scans.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 msmsScans.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 msms.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 mzRange.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 Oxidation (M)Sites.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 parameters.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 peptides.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 proteinGroups.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 summary.txt \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 tables.pdf \u2502 \u2502 \u2502 \u251c\u2500\u2500 rawtools \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 rawtools_log.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 rawtools_metrics.err \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 rawtools_metrics.out \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-A-200507.raw_Matrix.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-A-200507.raw_Metrics.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-A-200507.raw.mgf \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-A-200507.raw_Ms2_BP_chromatogram.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-A-200507.raw_Ms2_TIC_chromatogram.txt \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-A-200507.raw_Ms_BP_chromatogram.txt \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 SA001-R1-A-200507.raw_Ms_TIC_chromatogram.txt \u2502 \u2502 \u2502 \u2514\u2500\u2500 rawtools_qc \u2502 \u2502 \u2502 \u251c\u2500\u2500 QcDataTable.csv \u2502 \u2502 \u2502 \u251c\u2500\u2500 QC.xml \u2502 \u2502 \u2502 \u251c\u2500\u2500 rawtools_log.txt \u2502 \u2502 \u2502 \u251c\u2500\u2500 rawtools_qc.err \u2502 \u2502 \u2502 \u2514\u2500\u2500 rawtools_qc.out ... Certain fractions of the data are cleaned and stored in a columnar data format ( parquet ) to enable fast reads. This data is a simplified and standardized version of the data in the output folder and can be regenerated easily and is organized by data type rather than by input file, in contrast to the output directory. \u2502 \u251c\u2500\u2500 parquet \u2502 \u2502 \u2514\u2500\u2500 protein_groups \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-A-200507.parquet \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-B-200507.parquet \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-blank-200507.parquet \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-C-200507.parquet \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-D-200507.parquet \u2502 \u2502 \u251c\u2500\u2500 SA001-R1-E-200507.parquet ...","title":"The datalake"},{"location":"how-to-access-the-admin-panel/","text":"How to access the admin panel? If you followed the steps in the installation you have already created an admin account and started the ProteomicsQC server. Use a web browser and navigate to localhost:8000 or your own custom domain. In this example we use https://proteomics.resistancedb.org Now, you can navigate to the admin page using the ADMIN button. This will bring you to the login form https://proteomics.resistancedb.org/admin/ . After successfull login the following view opens. This is the admin panel where users, projects, and pipelines can be managed.","title":"Admin panel"},{"location":"how-to-access-the-admin-panel/#how-to-access-the-admin-panel","text":"If you followed the steps in the installation you have already created an admin account and started the ProteomicsQC server. Use a web browser and navigate to localhost:8000 or your own custom domain. In this example we use https://proteomics.resistancedb.org Now, you can navigate to the admin page using the ADMIN button. This will bring you to the login form https://proteomics.resistancedb.org/admin/ . After successfull login the following view opens. This is the admin panel where users, projects, and pipelines can be managed.","title":"How to access the admin panel?"},{"location":"how-to-add-a-pipeline/","text":"How to add a pipeline? To add a new pipeline the user has to login to the admin panel and at least one project has to exist. Otherwise, contact your admin or read how to add a project . Under site administration the click on MaxQuant Pipelines . Click on the add sign behind Maxquant pipelines to get to the pipeline creation form: Here, fill up the editable fields (name and a description). Select the MaxQuant version. If no version is selected the default version will be used (recommended). Add a Fasta file with amino-acid sequences of target proteins. Add a mqpar.xml (MaxQuant parameter file) generated with MaxQuant . The file should be generated with a single .raw file and the MaxQuant version should match the version used in the pipeline . Provide command line parameters for RawTools . Read Rawtools Help for more information. Not all MaxQuant versions are compatible with Proteomics QC . We recommend using the default version if possible. Finally, click on SAVE .","title":"Create a pipeline"},{"location":"how-to-add-a-pipeline/#how-to-add-a-pipeline","text":"To add a new pipeline the user has to login to the admin panel and at least one project has to exist. Otherwise, contact your admin or read how to add a project . Under site administration the click on MaxQuant Pipelines . Click on the add sign behind Maxquant pipelines to get to the pipeline creation form: Here, fill up the editable fields (name and a description). Select the MaxQuant version. If no version is selected the default version will be used (recommended). Add a Fasta file with amino-acid sequences of target proteins. Add a mqpar.xml (MaxQuant parameter file) generated with MaxQuant . The file should be generated with a single .raw file and the MaxQuant version should match the version used in the pipeline . Provide command line parameters for RawTools . Read Rawtools Help for more information. Not all MaxQuant versions are compatible with Proteomics QC . We recommend using the default version if possible. Finally, click on SAVE .","title":"How to add a pipeline?"},{"location":"how-to-add-a-project/","text":"How to add a new project? A project is a logical container for pipelines. Each project can contain multiple pipelines and all files submitted to certain or added within a certain project will be stored in a dedicated project directory in the datalake. To set up a new pipeline the user has to login to the admin panel . Click on the add sign behind Project to get to the project creation form: Here, fill up the editable fields (name and a description). In this example we call the new project Demo . Then click on SAVE to create the new project. You will be redirected to the Projects Overview and the new project appears on the top of the list: Congratulations you added a new project.","title":"Create a project"},{"location":"how-to-add-a-project/#how-to-add-a-new-project","text":"A project is a logical container for pipelines. Each project can contain multiple pipelines and all files submitted to certain or added within a certain project will be stored in a dedicated project directory in the datalake. To set up a new pipeline the user has to login to the admin panel . Click on the add sign behind Project to get to the project creation form: Here, fill up the editable fields (name and a description). In this example we call the new project Demo . Then click on SAVE to create the new project. You will be redirected to the Projects Overview and the new project appears on the top of the list: Congratulations you added a new project.","title":"How to add a new project?"},{"location":"how-to-submit-raw-files/","text":"How to submit RAW files to an existing pipeline? There are three ways to add new raw files to an existing pipeline. 1) Web frontend The most straightforward way to submit RAW files to an existing pipeline is the web frontend. After setting up a pipeline you can navigate to the Projects -> Your project -> Your pipeline -> Upload RAW Then click on Upload .RAW and select one or more .RAW files to upload. 2) Admin panel Navitgate to Admin -> RawFiles -> ADD RAWFILE Then select your pipeline and RAW file that you want to upload and click SAVE . 3) Using the API You can upload a RAW file using the API as described here","title":"Submit RAW files"},{"location":"how-to-submit-raw-files/#how-to-submit-raw-files-to-an-existing-pipeline","text":"There are three ways to add new raw files to an existing pipeline.","title":"How to submit RAW files to an existing pipeline?"},{"location":"how-to-submit-raw-files/#1-web-frontend","text":"The most straightforward way to submit RAW files to an existing pipeline is the web frontend. After setting up a pipeline you can navigate to the Projects -> Your project -> Your pipeline -> Upload RAW Then click on Upload .RAW and select one or more .RAW files to upload.","title":"1) Web frontend"},{"location":"how-to-submit-raw-files/#2-admin-panel","text":"Navitgate to Admin -> RawFiles -> ADD RAWFILE Then select your pipeline and RAW file that you want to upload and click SAVE .","title":"2) Admin panel"},{"location":"how-to-submit-raw-files/#3-using-the-api","text":"You can upload a RAW file using the API as described here","title":"3) Using the API"},{"location":"installation/","text":"Installation 1) Docker-compose The server can be started with docker-compose . Therefore, docker and docker-compose have to be installed on the host. The server can also be used without docker-compose, if the postgres and redis servers are running already. For official Docker installation instructions please visit: https://docs.docker.com/engine/install/ubuntu/ 2) Download the repository git clone --recursive git@github.com:LSARP/ProteomicsQC.git ProteomicsQC cd ProteomicsQC 3) Create configuration file ./scripts/generate_config.sh # generates a .env file for configuration Edit the .env file # OMICS PIPELINES CONFIG ## HOMPAGE SETTINGS HOME_TITLE=Your Hompage Title HOSTNAME=localhost:8080 ## STORAGE DB=./data/db/ DATALAKE=./data/datalake COMPUTE=./data/compute MEDIA=./data/media STATIC=./data/static ## EMAIL SETTINGS EMAIL_HOST=smtp.gmail.com EMAIL_USE_TLS=True EMAIL_USE_SSL=False EMAIL_PORT=587 EMAIL_HOST_USER=example@example.com EMAIL_HOST_PASSWORD=a-strong-password DEFAULT_FROM_EMAIL=noreply@example.com ## CELERY CONCURRENCY=8 # Change this to control how many CPU's can be used for jobs ## SECURITY KEYS SECRET_KEY=... 4) Initiate database make init # to start the server the first time 5) Create an admin account make createsuperuser And follow the instructions to provide an email address and password. 7) Run the server in production make collectstatic # The static url has to be setup with a remote proxy. make serve # starts the production server on port 8000 You can now navigate to localhost:8080/admin and login to the admin account with the credentials you provided in step 5. 8) Run a development server (Optional) make devel The development server will run on localhost:8000 .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#1-docker-compose","text":"The server can be started with docker-compose . Therefore, docker and docker-compose have to be installed on the host. The server can also be used without docker-compose, if the postgres and redis servers are running already. For official Docker installation instructions please visit: https://docs.docker.com/engine/install/ubuntu/","title":"1) Docker-compose"},{"location":"installation/#2-download-the-repository","text":"git clone --recursive git@github.com:LSARP/ProteomicsQC.git ProteomicsQC cd ProteomicsQC","title":"2) Download the repository"},{"location":"installation/#3-create-configuration-file","text":"./scripts/generate_config.sh # generates a .env file for configuration","title":"3) Create configuration file"},{"location":"installation/#edit-the-env-file","text":"# OMICS PIPELINES CONFIG ## HOMPAGE SETTINGS HOME_TITLE=Your Hompage Title HOSTNAME=localhost:8080 ## STORAGE DB=./data/db/ DATALAKE=./data/datalake COMPUTE=./data/compute MEDIA=./data/media STATIC=./data/static ## EMAIL SETTINGS EMAIL_HOST=smtp.gmail.com EMAIL_USE_TLS=True EMAIL_USE_SSL=False EMAIL_PORT=587 EMAIL_HOST_USER=example@example.com EMAIL_HOST_PASSWORD=a-strong-password DEFAULT_FROM_EMAIL=noreply@example.com ## CELERY CONCURRENCY=8 # Change this to control how many CPU's can be used for jobs ## SECURITY KEYS SECRET_KEY=...","title":"Edit the .env file"},{"location":"installation/#4-initiate-database","text":"make init # to start the server the first time","title":"4) Initiate database"},{"location":"installation/#5-create-an-admin-account","text":"make createsuperuser And follow the instructions to provide an email address and password.","title":"5) Create an admin account"},{"location":"installation/#7-run-the-server-in-production","text":"make collectstatic # The static url has to be setup with a remote proxy. make serve # starts the production server on port 8000 You can now navigate to localhost:8080/admin and login to the admin account with the credentials you provided in step 5.","title":"7) Run the server in production"},{"location":"installation/#8-run-a-development-server-optional","text":"make devel The development server will run on localhost:8000 .","title":"8) Run a development server (Optional)"},{"location":"issues/","text":"Help/Issues For help, reporting of issues, or feature requests, please open a GitHub issue on GitHub .","title":"Help/Issues"},{"location":"issues/#helpissues","text":"For help, reporting of issues, or feature requests, please open a GitHub issue on GitHub .","title":"Help/Issues"},{"location":"make/","text":"The docker-compose setup spins up two docker containers. One for the web-page and one for the the postgres database. make build to build the containers make migrations to create database migrations make migrate to migrate the database make createsuperuser to create credentials for a superuser make run to run the website and postgres database. make init initiate the database","title":"Make"},{"location":"manual/","text":"User manual Please, have a look at the installation instructions and how to start the pipeline server. Login with an admin account When you visit the website for the first time you will be redirected to the login page. A new user can register a new account with a valid email address. To visit the admin page the user has to be granted the rights by an admin. If you do not have setup an admin account To setup a Setup MaxQuant To setup MaxQuant you can upload a zipped MaxQuant version. Version 1.6.14 works with Mono and is the recommended version to use with the Proteomics Pipelines server. Please contact the MaxQuant mailing list for information on how to obtain older versions. Once you downloaded the zip-file you can upload it to the Pipeline server. Go to 'admin/pipelines/maxquantbin/add' and upload the zip file from Admin / Max quant bins / ADD MAX QUANT BIN . If successful the executable will be selectable under Admin / Max quant setups / ADD MAX QUANT SETUP/ . If this is done you can create your first pipeline. Create first pipeline 1. Create a new project At least one project has to be set up. Navigate to Admin / Projects / ADD PROJECT and provide a name and a description. 2. Upload Fasta File A fasta file with protein sequences has to be uploaded. 3. Upload mqpar.xml A mqpar.xml file has to be provided for each pipeline. It has to be created using the MaxQuant GUI. Only a single .RAW file should be included. 4. Create MaxQuant Setup The MaxQuant Setup defines a pipeline. It is a combination of a MaxQuant binary, a MaxQuant parameter file (mqpar.xml) and a Fasta file. Once created you will be able to submit .RAW files to this pipeline. 5. Setup RawFile type for RawTools","title":"User manual"},{"location":"manual/#user-manual","text":"Please, have a look at the installation instructions and how to start the pipeline server.","title":"User manual"},{"location":"manual/#login-with-an-admin-account","text":"When you visit the website for the first time you will be redirected to the login page. A new user can register a new account with a valid email address. To visit the admin page the user has to be granted the rights by an admin. If you do not have setup an admin account To setup a","title":"Login with an admin account"},{"location":"manual/#setup-maxquant","text":"To setup MaxQuant you can upload a zipped MaxQuant version. Version 1.6.14 works with Mono and is the recommended version to use with the Proteomics Pipelines server. Please contact the MaxQuant mailing list for information on how to obtain older versions. Once you downloaded the zip-file you can upload it to the Pipeline server. Go to 'admin/pipelines/maxquantbin/add' and upload the zip file from Admin / Max quant bins / ADD MAX QUANT BIN . If successful the executable will be selectable under Admin / Max quant setups / ADD MAX QUANT SETUP/ . If this is done you can create your first pipeline.","title":"Setup MaxQuant"},{"location":"manual/#create-first-pipeline","text":"","title":"Create first pipeline"},{"location":"manual/#1-create-a-new-project","text":"At least one project has to be set up. Navigate to Admin / Projects / ADD PROJECT and provide a name and a description.","title":"1. Create a new project"},{"location":"manual/#2-upload-fasta-file","text":"A fasta file with protein sequences has to be uploaded.","title":"2. Upload Fasta File"},{"location":"manual/#3-upload-mqparxml","text":"A mqpar.xml file has to be provided for each pipeline. It has to be created using the MaxQuant GUI. Only a single .RAW file should be included.","title":"3. Upload mqpar.xml"},{"location":"manual/#4-create-maxquant-setup","text":"The MaxQuant Setup defines a pipeline. It is a combination of a MaxQuant binary, a MaxQuant parameter file (mqpar.xml) and a Fasta file. Once created you will be able to submit .RAW files to this pipeline.","title":"4. Create MaxQuant Setup"},{"location":"manual/#5-setup-rawfile-type-for-rawtools","text":"","title":"5. Setup RawFile type for RawTools"},{"location":"maxquant/","text":"MaxQuant Cox, J. and Mann, M. MaxQuant enables high peptide identification rates, individualized p.p.b.-range mass accuracies and proteome-wide protein quantification. Nat Biotechnol, 2008, 26, pp 1367-72. Note that the paper has a large supplement containing in-depth descriptions of algorithms. MaxQuant is a cutting-edge proteomics software that allows for the identification, quantification, and analysis of large-scale proteomics data. This user-friendly tool utilizes state-of-the-art algorithms and statistical models to provide accurate and reliable results. It is designed to handle complex data sets and can accommodate a wide range of experimental designs, including label-free and isobaric labeling approaches. The software offers a wide range of features, including peptide and protein identification, quantification of label-free and labeled samples, protein quantification across multiple samples, and advanced statistical analysis. The software also supports a variety of data formats and integrates seamlessly with other popular proteomics software tools. MaxQuant's user-friendly interface and powerful algorithms make it an indispensable tool for proteomics researchers. Whether you are performing targeted or exploratory analysis, MaxQuant provides accurate and reliable results that enable you to draw meaningful conclusions from your data. With MaxQuant, you can unlock the full potential of your proteomics data and accelerate your research. The ProteomicsQC pipeline uses MaxQuant to process individual and independent ThermoFisher RAW files. To generate an input parameter file for the ProteomicsQC, a local installation of MaxQuant must be installed and setup with an example RAW files and the desired search parameters. Only one RAW file should be used to do so. Then the search parameters must be exported and can be uploaded to ProteomicsQC.","title":"MaxQuant"},{"location":"maxquant/#maxquant","text":"Cox, J. and Mann, M. MaxQuant enables high peptide identification rates, individualized p.p.b.-range mass accuracies and proteome-wide protein quantification. Nat Biotechnol, 2008, 26, pp 1367-72. Note that the paper has a large supplement containing in-depth descriptions of algorithms. MaxQuant is a cutting-edge proteomics software that allows for the identification, quantification, and analysis of large-scale proteomics data. This user-friendly tool utilizes state-of-the-art algorithms and statistical models to provide accurate and reliable results. It is designed to handle complex data sets and can accommodate a wide range of experimental designs, including label-free and isobaric labeling approaches. The software offers a wide range of features, including peptide and protein identification, quantification of label-free and labeled samples, protein quantification across multiple samples, and advanced statistical analysis. The software also supports a variety of data formats and integrates seamlessly with other popular proteomics software tools. MaxQuant's user-friendly interface and powerful algorithms make it an indispensable tool for proteomics researchers. Whether you are performing targeted or exploratory analysis, MaxQuant provides accurate and reliable results that enable you to draw meaningful conclusions from your data. With MaxQuant, you can unlock the full potential of your proteomics data and accelerate your research. The ProteomicsQC pipeline uses MaxQuant to process individual and independent ThermoFisher RAW files. To generate an input parameter file for the ProteomicsQC, a local installation of MaxQuant must be installed and setup with an example RAW files and the desired search parameters. Only one RAW file should be used to do so. Then the search parameters must be exported and can be uploaded to ProteomicsQC.","title":"MaxQuant"},{"location":"rawtools/","text":"RawTools Kovalchik KA, Colborne S, Spencer SE, Sorensen PH, Chen DDY, Morin GB, et al. RawTools: Rapid and Dynamic Interrogation of Orbitrap Data Files for Mass Spectrometer System Management. J Proteome Res. 2018. doi:10.1021/acs.jproteome.8b00721 RawTools is a comprehensive and user-friendly software designed for the analysis of mass spectrometry-based proteomics data. It is an open-source tool that provides a range of features for processing and analyzing raw proteomics data, including quality control checks, filtering, normalization, peak detection, and quantification. The tool supports various file formats commonly used in proteomics, including RAW, MGF, and mzML files, and offers a range of visualization options to aid in data exploration and interpretation. The software also includes advanced features such as label-free quantification, statistical analysis, and data normalization, making it an ideal tool for proteomics researchers. One of the key strengths of RawTools is its user-friendly interface, which allows researchers to easily navigate through their data and perform complex analyses without the need for extensive programming skills. The software is regularly updated, and its development is driven by a community of researchers and bioinformaticians, ensuring that it stays up-to-date with the latest advancements in proteomics research. Overall, RawTools is a powerful and versatile tool that can help researchers to efficiently process, analyze, and interpret their proteomics data, providing valuable insights into the biological systems under investigation. More information is available in the Github repository . Parameters Here is the help text that explains the different parameters of RawTools that are relevant for Proteomics QC . However, not all of them were tested. ========== PARAMETERS HELP ========== Below you will find information on all the parameters available to this application. The Parameter field is a (hopefully) descriptive name of the parameter which might be referenced when encountering an error. Short form and Long form are how you invoke the parameters on the command line. You can use either form. Required indicates whether the application requires the parameter have a value in order to run. INFO DESCRIPTION --------------- Parameter: RawFiles Indicates input file(s) to be processed, separated by a space if Short form: -f there are multiple files. Must be Thermo .raw files. You must use Long form: -files either -f or -d to indicate the file(s) to process. Required: False Parameter: Parse Parses raw file meta and scan data and writes the output to a Short form: -p tab-delimited text file. Typically either this output or the Long form: -parse quant output (-q) is used unless your aim is to simply create an MGF or to observe broad metrics using -x. Long form: -parse Required: False Parameter: Quant Similar to parse (-p), but also quantifies reporter ions and write Short form: -q results to output matrix. Use of this flag requires you also specify Long form: -quant the reagents used for isobaric labeling with the -r argument Required: False (e.g. -r TMT10) Parameter: LabelingReagent Required for reporter ion quantification. Reagents used to label Short form: -r peptides, required if using quant option. Available options are: Long form: -labellingreagent {TMT0, TMT2, TMT6, TMT10, TMT11, TMT16, iTRAQ4, iTRAQ8}. Required: False Parameter: UnlabeledQuant Calculate areas of precursor peaks and writes them to the parse or Short form: -u quant file (ParentPeakArea column). This option is to be used in Long form: -unlabeledquant combination with -p or -q. Required: False Parameter: WriteMGF Writes a standard MGF file. To specify a mass cutoff use the -c Short form: -m argument. Long form: -mgf Required: False Parameter: MgfMassCutoff Specify a mass cutoff to be applied when generating MGF files. Short form: -c May be of use if removal of reporter ions is desired prior to Long form: -masscutoff searching of MS2 spectra. Default is 0. Required: False Parameter: OutputDirectory The directory in which to write output. Can be a relative or Short form: -o absolute path to the directory. If it is a relative path it Long form: -out will be placed inside the directory containing the respective Required: False raw file. Note that relative paths should not start with a slash. If this is left blank the directory where the raw file is stored will be used by default. Parameter: Metrics Write a txt file containing general metrics about the MS run. Short form: -x Long form: -metrics Required: False Parameter: Chromatogram Write a chromatogram to disk. Should be in the format Short form: -chro \"-chro [order][type]\", where order is the MS order (or a combination Long form: -chromatograms of orders) and type is T, B, or TB (TIC, base peak and both, Required: False respectively). For example, to generate MS1 and MS2 TIC and base peak chromatograms, invoke \"-chro 12TB\". Or, to generate a MS2 TIC, invoke \"-chro 2T\". Parameter: RefineMassCharge Refine precursor charge and monoisotopic mass assignments. Short form: -R Highly recommended if monoisotopic precursor selection was Long form: -refinemasscharge turned off in the instrument method (or peptide match on a Required: False QE instrument). Parameter: MinCharge The minimum charge to consider when refining precursor Short form: -min mass and charge. Long form: -mincharge Required: False Parameter: MaxCharge The maximum charge to consider when refining precursor Short form: -max mass and charge. Long form: -maxcharge Required: False Parameter: FastaDB Required for an X! Tandem search during QC. Path to a Short form: -db fasta protein database. Long form: -fastadb Required: False Parameter: FixedModifications Fixed modifications to pass to the search, if desired. Short form: -fmods Use mass@aminoacid1,mass@aminoacid2 format. It is important Long form: -fixedmods that the values are separated with a comma and not spaces. Required: False Invoke \">RawTools -modifications\" to see examples of some common modifications Parameter: VariableModifications Variable modifications to pass to the search, if desired. Short form: -vmods Use mass@aminoacid1,mass@aminoacid2 format. It is important Long form: -variablemods that the values are separated with a comma and not spaces. Required: False Invoke \">RawTools -modifications\" to see examples of some common modifications Parameter: XTandemDirectory Specify the path to the X! Tandem directory (the directory Short form: -X containing \"tandem.exe\") if you want to run a database search Long form: -xtandem as part of QC. Required: False Parameter: NumberSpectra The number of MS2 spectra to be passes to the search engine as Short form: -N an MGF file. Defaults to 10,000. If N is greater than the number Long form: -numberspectra of MS2 scans in a raw file, all MS2 scans will be used. Required: False Parameter: LogDump Write the instrument logs from all provided raw files to disk. Short form: -l Long form: -logdump Required: False","title":"RawTools"},{"location":"rawtools/#rawtools","text":"Kovalchik KA, Colborne S, Spencer SE, Sorensen PH, Chen DDY, Morin GB, et al. RawTools: Rapid and Dynamic Interrogation of Orbitrap Data Files for Mass Spectrometer System Management. J Proteome Res. 2018. doi:10.1021/acs.jproteome.8b00721 RawTools is a comprehensive and user-friendly software designed for the analysis of mass spectrometry-based proteomics data. It is an open-source tool that provides a range of features for processing and analyzing raw proteomics data, including quality control checks, filtering, normalization, peak detection, and quantification. The tool supports various file formats commonly used in proteomics, including RAW, MGF, and mzML files, and offers a range of visualization options to aid in data exploration and interpretation. The software also includes advanced features such as label-free quantification, statistical analysis, and data normalization, making it an ideal tool for proteomics researchers. One of the key strengths of RawTools is its user-friendly interface, which allows researchers to easily navigate through their data and perform complex analyses without the need for extensive programming skills. The software is regularly updated, and its development is driven by a community of researchers and bioinformaticians, ensuring that it stays up-to-date with the latest advancements in proteomics research. Overall, RawTools is a powerful and versatile tool that can help researchers to efficiently process, analyze, and interpret their proteomics data, providing valuable insights into the biological systems under investigation. More information is available in the Github repository .","title":"RawTools"},{"location":"rawtools/#parameters","text":"Here is the help text that explains the different parameters of RawTools that are relevant for Proteomics QC . However, not all of them were tested. ========== PARAMETERS HELP ========== Below you will find information on all the parameters available to this application. The Parameter field is a (hopefully) descriptive name of the parameter which might be referenced when encountering an error. Short form and Long form are how you invoke the parameters on the command line. You can use either form. Required indicates whether the application requires the parameter have a value in order to run. INFO DESCRIPTION --------------- Parameter: RawFiles Indicates input file(s) to be processed, separated by a space if Short form: -f there are multiple files. Must be Thermo .raw files. You must use Long form: -files either -f or -d to indicate the file(s) to process. Required: False Parameter: Parse Parses raw file meta and scan data and writes the output to a Short form: -p tab-delimited text file. Typically either this output or the Long form: -parse quant output (-q) is used unless your aim is to simply create an MGF or to observe broad metrics using -x. Long form: -parse Required: False Parameter: Quant Similar to parse (-p), but also quantifies reporter ions and write Short form: -q results to output matrix. Use of this flag requires you also specify Long form: -quant the reagents used for isobaric labeling with the -r argument Required: False (e.g. -r TMT10) Parameter: LabelingReagent Required for reporter ion quantification. Reagents used to label Short form: -r peptides, required if using quant option. Available options are: Long form: -labellingreagent {TMT0, TMT2, TMT6, TMT10, TMT11, TMT16, iTRAQ4, iTRAQ8}. Required: False Parameter: UnlabeledQuant Calculate areas of precursor peaks and writes them to the parse or Short form: -u quant file (ParentPeakArea column). This option is to be used in Long form: -unlabeledquant combination with -p or -q. Required: False Parameter: WriteMGF Writes a standard MGF file. To specify a mass cutoff use the -c Short form: -m argument. Long form: -mgf Required: False Parameter: MgfMassCutoff Specify a mass cutoff to be applied when generating MGF files. Short form: -c May be of use if removal of reporter ions is desired prior to Long form: -masscutoff searching of MS2 spectra. Default is 0. Required: False Parameter: OutputDirectory The directory in which to write output. Can be a relative or Short form: -o absolute path to the directory. If it is a relative path it Long form: -out will be placed inside the directory containing the respective Required: False raw file. Note that relative paths should not start with a slash. If this is left blank the directory where the raw file is stored will be used by default. Parameter: Metrics Write a txt file containing general metrics about the MS run. Short form: -x Long form: -metrics Required: False Parameter: Chromatogram Write a chromatogram to disk. Should be in the format Short form: -chro \"-chro [order][type]\", where order is the MS order (or a combination Long form: -chromatograms of orders) and type is T, B, or TB (TIC, base peak and both, Required: False respectively). For example, to generate MS1 and MS2 TIC and base peak chromatograms, invoke \"-chro 12TB\". Or, to generate a MS2 TIC, invoke \"-chro 2T\". Parameter: RefineMassCharge Refine precursor charge and monoisotopic mass assignments. Short form: -R Highly recommended if monoisotopic precursor selection was Long form: -refinemasscharge turned off in the instrument method (or peptide match on a Required: False QE instrument). Parameter: MinCharge The minimum charge to consider when refining precursor Short form: -min mass and charge. Long form: -mincharge Required: False Parameter: MaxCharge The maximum charge to consider when refining precursor Short form: -max mass and charge. Long form: -maxcharge Required: False Parameter: FastaDB Required for an X! Tandem search during QC. Path to a Short form: -db fasta protein database. Long form: -fastadb Required: False Parameter: FixedModifications Fixed modifications to pass to the search, if desired. Short form: -fmods Use mass@aminoacid1,mass@aminoacid2 format. It is important Long form: -fixedmods that the values are separated with a comma and not spaces. Required: False Invoke \">RawTools -modifications\" to see examples of some common modifications Parameter: VariableModifications Variable modifications to pass to the search, if desired. Short form: -vmods Use mass@aminoacid1,mass@aminoacid2 format. It is important Long form: -variablemods that the values are separated with a comma and not spaces. Required: False Invoke \">RawTools -modifications\" to see examples of some common modifications Parameter: XTandemDirectory Specify the path to the X! Tandem directory (the directory Short form: -X containing \"tandem.exe\") if you want to run a database search Long form: -xtandem as part of QC. Required: False Parameter: NumberSpectra The number of MS2 spectra to be passes to the search engine as Short form: -N an MGF file. Defaults to 10,000. If N is greater than the number Long form: -numberspectra of MS2 scans in a raw file, all MS2 scans will be used. Required: False Parameter: LogDump Write the instrument logs from all provided raw files to disk. Short form: -l Long form: -logdump Required: False","title":"Parameters"},{"location":"server/","text":"Roadmap to setup your own ProteomicsQC server In order to run the server on a specific domain you have to register the domain and point it to the public IP address of your server. Furthermore, you have to setup a remote proxy to redirect HTTP and HTTPS requests to port 8080. For security reasons you should always use HTTPS.","title":"Setup an online server"},{"location":"server/#roadmap-to-setup-your-own-proteomicsqc-server","text":"In order to run the server on a specific domain you have to register the domain and point it to the public IP address of your server. Furthermore, you have to setup a remote proxy to redirect HTTP and HTTPS requests to port 8080. For security reasons you should always use HTTPS.","title":"Roadmap to setup your own ProteomicsQC server"},{"location":"img/maxquant-issues/","text":"","title":"Maxquant issues"}]}